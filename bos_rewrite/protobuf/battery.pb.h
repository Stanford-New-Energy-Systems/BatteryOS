// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battery.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_battery_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_battery_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_battery_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_battery_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_battery_2eproto;
namespace bosproto {
class BatteryCommand;
struct BatteryCommandDefaultTypeInternal;
extern BatteryCommandDefaultTypeInternal _BatteryCommand_default_instance_;
class BatteryStatus;
struct BatteryStatusDefaultTypeInternal;
extern BatteryStatusDefaultTypeInternal _BatteryStatus_default_instance_;
class BatteryStatusResponse;
struct BatteryStatusResponseDefaultTypeInternal;
extern BatteryStatusResponseDefaultTypeInternal _BatteryStatusResponse_default_instance_;
class RemoveBatteryResponse;
struct RemoveBatteryResponseDefaultTypeInternal;
extern RemoveBatteryResponseDefaultTypeInternal _RemoveBatteryResponse_default_instance_;
class ScheduleSetCurrent;
struct ScheduleSetCurrentDefaultTypeInternal;
extern ScheduleSetCurrentDefaultTypeInternal _ScheduleSetCurrent_default_instance_;
class ScheduleSetCurrentResponse;
struct ScheduleSetCurrentResponseDefaultTypeInternal;
extern ScheduleSetCurrentResponseDefaultTypeInternal _ScheduleSetCurrentResponse_default_instance_;
class SetStatusResponse;
struct SetStatusResponseDefaultTypeInternal;
extern SetStatusResponseDefaultTypeInternal _SetStatusResponse_default_instance_;
}  // namespace bosproto
PROTOBUF_NAMESPACE_OPEN
template<> ::bosproto::BatteryCommand* Arena::CreateMaybeMessage<::bosproto::BatteryCommand>(Arena*);
template<> ::bosproto::BatteryStatus* Arena::CreateMaybeMessage<::bosproto::BatteryStatus>(Arena*);
template<> ::bosproto::BatteryStatusResponse* Arena::CreateMaybeMessage<::bosproto::BatteryStatusResponse>(Arena*);
template<> ::bosproto::RemoveBatteryResponse* Arena::CreateMaybeMessage<::bosproto::RemoveBatteryResponse>(Arena*);
template<> ::bosproto::ScheduleSetCurrent* Arena::CreateMaybeMessage<::bosproto::ScheduleSetCurrent>(Arena*);
template<> ::bosproto::ScheduleSetCurrentResponse* Arena::CreateMaybeMessage<::bosproto::ScheduleSetCurrentResponse>(Arena*);
template<> ::bosproto::SetStatusResponse* Arena::CreateMaybeMessage<::bosproto::SetStatusResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosproto {

enum Command : int {
  Schedule_Set_Current = 0,
  Get_Status = 1,
  Remove_Battery = 2,
  Set_Status = 3,
  Command_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Command_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Command_IsValid(int value);
constexpr Command Command_MIN = Schedule_Set_Current;
constexpr Command Command_MAX = Set_Status;
constexpr int Command_ARRAYSIZE = Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Command_descriptor();
template<typename T>
inline const std::string& Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Command_descriptor(), enum_t_value);
}
inline bool Command_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Command>(
    Command_descriptor(), name, value);
}
// ===================================================================

class BatteryStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosproto.BatteryStatus) */ {
 public:
  inline BatteryStatus() : BatteryStatus(nullptr) {}
  ~BatteryStatus() override;
  explicit PROTOBUF_CONSTEXPR BatteryStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatteryStatus(const BatteryStatus& from);
  BatteryStatus(BatteryStatus&& from) noexcept
    : BatteryStatus() {
    *this = ::std::move(from);
  }

  inline BatteryStatus& operator=(const BatteryStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatteryStatus& operator=(BatteryStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatteryStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatteryStatus* internal_default_instance() {
    return reinterpret_cast<const BatteryStatus*>(
               &_BatteryStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BatteryStatus& a, BatteryStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(BatteryStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatteryStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatteryStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatteryStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatteryStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatteryStatus& from) {
    BatteryStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatteryStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosproto.BatteryStatus";
  }
  protected:
  explicit BatteryStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoltageMVFieldNumber = 1,
    kCurrentMAFieldNumber = 2,
    kCapacityMAhFieldNumber = 3,
    kMaxCapacityMAhFieldNumber = 4,
    kMaxChargingCurrentMAFieldNumber = 5,
    kMaxDischargingCurrentMAFieldNumber = 6,
    kTimestampFieldNumber = 7,
  };
  // double voltage_mV = 1;
  void clear_voltage_mv();
  double voltage_mv() const;
  void set_voltage_mv(double value);
  private:
  double _internal_voltage_mv() const;
  void _internal_set_voltage_mv(double value);
  public:

  // double current_mA = 2;
  void clear_current_ma();
  double current_ma() const;
  void set_current_ma(double value);
  private:
  double _internal_current_ma() const;
  void _internal_set_current_ma(double value);
  public:

  // double capacity_mAh = 3;
  void clear_capacity_mah();
  double capacity_mah() const;
  void set_capacity_mah(double value);
  private:
  double _internal_capacity_mah() const;
  void _internal_set_capacity_mah(double value);
  public:

  // double max_capacity_mAh = 4;
  void clear_max_capacity_mah();
  double max_capacity_mah() const;
  void set_max_capacity_mah(double value);
  private:
  double _internal_max_capacity_mah() const;
  void _internal_set_max_capacity_mah(double value);
  public:

  // double max_charging_current_mA = 5;
  void clear_max_charging_current_ma();
  double max_charging_current_ma() const;
  void set_max_charging_current_ma(double value);
  private:
  double _internal_max_charging_current_ma() const;
  void _internal_set_max_charging_current_ma(double value);
  public:

  // double max_discharging_current_mA = 6;
  void clear_max_discharging_current_ma();
  double max_discharging_current_ma() const;
  void set_max_discharging_current_ma(double value);
  private:
  double _internal_max_discharging_current_ma() const;
  void _internal_set_max_discharging_current_ma(double value);
  public:

  // uint64 timestamp = 7;
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:bosproto.BatteryStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double voltage_mv_;
    double current_ma_;
    double capacity_mah_;
    double max_capacity_mah_;
    double max_charging_current_ma_;
    double max_discharging_current_ma_;
    uint64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battery_2eproto;
};
// -------------------------------------------------------------------

class ScheduleSetCurrent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosproto.ScheduleSetCurrent) */ {
 public:
  inline ScheduleSetCurrent() : ScheduleSetCurrent(nullptr) {}
  ~ScheduleSetCurrent() override;
  explicit PROTOBUF_CONSTEXPR ScheduleSetCurrent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScheduleSetCurrent(const ScheduleSetCurrent& from);
  ScheduleSetCurrent(ScheduleSetCurrent&& from) noexcept
    : ScheduleSetCurrent() {
    *this = ::std::move(from);
  }

  inline ScheduleSetCurrent& operator=(const ScheduleSetCurrent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScheduleSetCurrent& operator=(ScheduleSetCurrent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScheduleSetCurrent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScheduleSetCurrent* internal_default_instance() {
    return reinterpret_cast<const ScheduleSetCurrent*>(
               &_ScheduleSetCurrent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ScheduleSetCurrent& a, ScheduleSetCurrent& b) {
    a.Swap(&b);
  }
  inline void Swap(ScheduleSetCurrent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScheduleSetCurrent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScheduleSetCurrent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScheduleSetCurrent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScheduleSetCurrent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScheduleSetCurrent& from) {
    ScheduleSetCurrent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScheduleSetCurrent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosproto.ScheduleSetCurrent";
  }
  protected:
  explicit ScheduleSetCurrent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentMAFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
  };
  // double current_mA = 1;
  void clear_current_ma();
  double current_ma() const;
  void set_current_ma(double value);
  private:
  double _internal_current_ma() const;
  void _internal_set_current_ma(double value);
  public:

  // uint64 startTime = 2;
  void clear_starttime();
  uint64_t starttime() const;
  void set_starttime(uint64_t value);
  private:
  uint64_t _internal_starttime() const;
  void _internal_set_starttime(uint64_t value);
  public:

  // uint64 endTime = 3;
  void clear_endtime();
  uint64_t endtime() const;
  void set_endtime(uint64_t value);
  private:
  uint64_t _internal_endtime() const;
  void _internal_set_endtime(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:bosproto.ScheduleSetCurrent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double current_ma_;
    uint64_t starttime_;
    uint64_t endtime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battery_2eproto;
};
// -------------------------------------------------------------------

class BatteryCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosproto.BatteryCommand) */ {
 public:
  inline BatteryCommand() : BatteryCommand(nullptr) {}
  ~BatteryCommand() override;
  explicit PROTOBUF_CONSTEXPR BatteryCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatteryCommand(const BatteryCommand& from);
  BatteryCommand(BatteryCommand&& from) noexcept
    : BatteryCommand() {
    *this = ::std::move(from);
  }

  inline BatteryCommand& operator=(const BatteryCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatteryCommand& operator=(BatteryCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatteryCommand& default_instance() {
    return *internal_default_instance();
  }
  enum ScheduleParametersCase {
    kStatus = 2,
    kScheduleSetCurrent = 3,
    SCHEDULE_PARAMETERS_NOT_SET = 0,
  };

  static inline const BatteryCommand* internal_default_instance() {
    return reinterpret_cast<const BatteryCommand*>(
               &_BatteryCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BatteryCommand& a, BatteryCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(BatteryCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatteryCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatteryCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatteryCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatteryCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatteryCommand& from) {
    BatteryCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatteryCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosproto.BatteryCommand";
  }
  protected:
  explicit BatteryCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kStatusFieldNumber = 2,
    kScheduleSetCurrentFieldNumber = 3,
  };
  // .bosproto.Command command = 1;
  void clear_command();
  ::bosproto::Command command() const;
  void set_command(::bosproto::Command value);
  private:
  ::bosproto::Command _internal_command() const;
  void _internal_set_command(::bosproto::Command value);
  public:

  // .bosproto.BatteryStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::bosproto::BatteryStatus& status() const;
  PROTOBUF_NODISCARD ::bosproto::BatteryStatus* release_status();
  ::bosproto::BatteryStatus* mutable_status();
  void set_allocated_status(::bosproto::BatteryStatus* status);
  private:
  const ::bosproto::BatteryStatus& _internal_status() const;
  ::bosproto::BatteryStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::bosproto::BatteryStatus* status);
  ::bosproto::BatteryStatus* unsafe_arena_release_status();

  // .bosproto.ScheduleSetCurrent schedule_set_current = 3;
  bool has_schedule_set_current() const;
  private:
  bool _internal_has_schedule_set_current() const;
  public:
  void clear_schedule_set_current();
  const ::bosproto::ScheduleSetCurrent& schedule_set_current() const;
  PROTOBUF_NODISCARD ::bosproto::ScheduleSetCurrent* release_schedule_set_current();
  ::bosproto::ScheduleSetCurrent* mutable_schedule_set_current();
  void set_allocated_schedule_set_current(::bosproto::ScheduleSetCurrent* schedule_set_current);
  private:
  const ::bosproto::ScheduleSetCurrent& _internal_schedule_set_current() const;
  ::bosproto::ScheduleSetCurrent* _internal_mutable_schedule_set_current();
  public:
  void unsafe_arena_set_allocated_schedule_set_current(
      ::bosproto::ScheduleSetCurrent* schedule_set_current);
  ::bosproto::ScheduleSetCurrent* unsafe_arena_release_schedule_set_current();

  void clear_schedule_parameters();
  ScheduleParametersCase schedule_parameters_case() const;
  // @@protoc_insertion_point(class_scope:bosproto.BatteryCommand)
 private:
  class _Internal;
  void set_has_status();
  void set_has_schedule_set_current();

  inline bool has_schedule_parameters() const;
  inline void clear_has_schedule_parameters();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int command_;
    union ScheduleParametersUnion {
      constexpr ScheduleParametersUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::bosproto::BatteryStatus* status_;
      ::bosproto::ScheduleSetCurrent* schedule_set_current_;
    } schedule_parameters_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battery_2eproto;
};
// -------------------------------------------------------------------

class BatteryStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosproto.BatteryStatusResponse) */ {
 public:
  inline BatteryStatusResponse() : BatteryStatusResponse(nullptr) {}
  ~BatteryStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR BatteryStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatteryStatusResponse(const BatteryStatusResponse& from);
  BatteryStatusResponse(BatteryStatusResponse&& from) noexcept
    : BatteryStatusResponse() {
    *this = ::std::move(from);
  }

  inline BatteryStatusResponse& operator=(const BatteryStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatteryStatusResponse& operator=(BatteryStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatteryStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  enum ReturnValueCase {
    kFailReason = 2,
    kStatus = 3,
    RETURN_VALUE_NOT_SET = 0,
  };

  static inline const BatteryStatusResponse* internal_default_instance() {
    return reinterpret_cast<const BatteryStatusResponse*>(
               &_BatteryStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BatteryStatusResponse& a, BatteryStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BatteryStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatteryStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatteryStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatteryStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatteryStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatteryStatusResponse& from) {
    BatteryStatusResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatteryStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosproto.BatteryStatusResponse";
  }
  protected:
  explicit BatteryStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnCodeFieldNumber = 1,
    kFailReasonFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // int64 return_code = 1;
  void clear_return_code();
  int64_t return_code() const;
  void set_return_code(int64_t value);
  private:
  int64_t _internal_return_code() const;
  void _internal_set_return_code(int64_t value);
  public:

  // string fail_reason = 2;
  bool has_fail_reason() const;
  private:
  bool _internal_has_fail_reason() const;
  public:
  void clear_fail_reason();
  const std::string& fail_reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fail_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fail_reason();
  PROTOBUF_NODISCARD std::string* release_fail_reason();
  void set_allocated_fail_reason(std::string* fail_reason);
  private:
  const std::string& _internal_fail_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fail_reason(const std::string& value);
  std::string* _internal_mutable_fail_reason();
  public:

  // .bosproto.BatteryStatus status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::bosproto::BatteryStatus& status() const;
  PROTOBUF_NODISCARD ::bosproto::BatteryStatus* release_status();
  ::bosproto::BatteryStatus* mutable_status();
  void set_allocated_status(::bosproto::BatteryStatus* status);
  private:
  const ::bosproto::BatteryStatus& _internal_status() const;
  ::bosproto::BatteryStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::bosproto::BatteryStatus* status);
  ::bosproto::BatteryStatus* unsafe_arena_release_status();

  void clear_return_value();
  ReturnValueCase return_value_case() const;
  // @@protoc_insertion_point(class_scope:bosproto.BatteryStatusResponse)
 private:
  class _Internal;
  void set_has_fail_reason();
  void set_has_status();

  inline bool has_return_value() const;
  inline void clear_has_return_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t return_code_;
    union ReturnValueUnion {
      constexpr ReturnValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fail_reason_;
      ::bosproto::BatteryStatus* status_;
    } return_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battery_2eproto;
};
// -------------------------------------------------------------------

class ScheduleSetCurrentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosproto.ScheduleSetCurrentResponse) */ {
 public:
  inline ScheduleSetCurrentResponse() : ScheduleSetCurrentResponse(nullptr) {}
  ~ScheduleSetCurrentResponse() override;
  explicit PROTOBUF_CONSTEXPR ScheduleSetCurrentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScheduleSetCurrentResponse(const ScheduleSetCurrentResponse& from);
  ScheduleSetCurrentResponse(ScheduleSetCurrentResponse&& from) noexcept
    : ScheduleSetCurrentResponse() {
    *this = ::std::move(from);
  }

  inline ScheduleSetCurrentResponse& operator=(const ScheduleSetCurrentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScheduleSetCurrentResponse& operator=(ScheduleSetCurrentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScheduleSetCurrentResponse& default_instance() {
    return *internal_default_instance();
  }
  enum ReturnValueCase {
    kSuccessMessage = 2,
    kFailureMessage = 3,
    RETURN_VALUE_NOT_SET = 0,
  };

  static inline const ScheduleSetCurrentResponse* internal_default_instance() {
    return reinterpret_cast<const ScheduleSetCurrentResponse*>(
               &_ScheduleSetCurrentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ScheduleSetCurrentResponse& a, ScheduleSetCurrentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ScheduleSetCurrentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScheduleSetCurrentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScheduleSetCurrentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScheduleSetCurrentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScheduleSetCurrentResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScheduleSetCurrentResponse& from) {
    ScheduleSetCurrentResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScheduleSetCurrentResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosproto.ScheduleSetCurrentResponse";
  }
  protected:
  explicit ScheduleSetCurrentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnCodeFieldNumber = 1,
    kSuccessMessageFieldNumber = 2,
    kFailureMessageFieldNumber = 3,
  };
  // int64 return_code = 1;
  void clear_return_code();
  int64_t return_code() const;
  void set_return_code(int64_t value);
  private:
  int64_t _internal_return_code() const;
  void _internal_set_return_code(int64_t value);
  public:

  // string success_message = 2;
  bool has_success_message() const;
  private:
  bool _internal_has_success_message() const;
  public:
  void clear_success_message();
  const std::string& success_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_success_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_success_message();
  PROTOBUF_NODISCARD std::string* release_success_message();
  void set_allocated_success_message(std::string* success_message);
  private:
  const std::string& _internal_success_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_success_message(const std::string& value);
  std::string* _internal_mutable_success_message();
  public:

  // string failure_message = 3;
  bool has_failure_message() const;
  private:
  bool _internal_has_failure_message() const;
  public:
  void clear_failure_message();
  const std::string& failure_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_failure_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_failure_message();
  PROTOBUF_NODISCARD std::string* release_failure_message();
  void set_allocated_failure_message(std::string* failure_message);
  private:
  const std::string& _internal_failure_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_failure_message(const std::string& value);
  std::string* _internal_mutable_failure_message();
  public:

  void clear_return_value();
  ReturnValueCase return_value_case() const;
  // @@protoc_insertion_point(class_scope:bosproto.ScheduleSetCurrentResponse)
 private:
  class _Internal;
  void set_has_success_message();
  void set_has_failure_message();

  inline bool has_return_value() const;
  inline void clear_has_return_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t return_code_;
    union ReturnValueUnion {
      constexpr ReturnValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr success_message_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr failure_message_;
    } return_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battery_2eproto;
};
// -------------------------------------------------------------------

class RemoveBatteryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosproto.RemoveBatteryResponse) */ {
 public:
  inline RemoveBatteryResponse() : RemoveBatteryResponse(nullptr) {}
  ~RemoveBatteryResponse() override;
  explicit PROTOBUF_CONSTEXPR RemoveBatteryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveBatteryResponse(const RemoveBatteryResponse& from);
  RemoveBatteryResponse(RemoveBatteryResponse&& from) noexcept
    : RemoveBatteryResponse() {
    *this = ::std::move(from);
  }

  inline RemoveBatteryResponse& operator=(const RemoveBatteryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveBatteryResponse& operator=(RemoveBatteryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveBatteryResponse& default_instance() {
    return *internal_default_instance();
  }
  enum ReturnValueCase {
    kSuccessMessage = 2,
    kFailureMessage = 3,
    RETURN_VALUE_NOT_SET = 0,
  };

  static inline const RemoveBatteryResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveBatteryResponse*>(
               &_RemoveBatteryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RemoveBatteryResponse& a, RemoveBatteryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveBatteryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveBatteryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveBatteryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveBatteryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveBatteryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoveBatteryResponse& from) {
    RemoveBatteryResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveBatteryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosproto.RemoveBatteryResponse";
  }
  protected:
  explicit RemoveBatteryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnCodeFieldNumber = 1,
    kSuccessMessageFieldNumber = 2,
    kFailureMessageFieldNumber = 3,
  };
  // int64 return_code = 1;
  void clear_return_code();
  int64_t return_code() const;
  void set_return_code(int64_t value);
  private:
  int64_t _internal_return_code() const;
  void _internal_set_return_code(int64_t value);
  public:

  // string success_message = 2;
  bool has_success_message() const;
  private:
  bool _internal_has_success_message() const;
  public:
  void clear_success_message();
  const std::string& success_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_success_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_success_message();
  PROTOBUF_NODISCARD std::string* release_success_message();
  void set_allocated_success_message(std::string* success_message);
  private:
  const std::string& _internal_success_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_success_message(const std::string& value);
  std::string* _internal_mutable_success_message();
  public:

  // string failure_message = 3;
  bool has_failure_message() const;
  private:
  bool _internal_has_failure_message() const;
  public:
  void clear_failure_message();
  const std::string& failure_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_failure_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_failure_message();
  PROTOBUF_NODISCARD std::string* release_failure_message();
  void set_allocated_failure_message(std::string* failure_message);
  private:
  const std::string& _internal_failure_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_failure_message(const std::string& value);
  std::string* _internal_mutable_failure_message();
  public:

  void clear_return_value();
  ReturnValueCase return_value_case() const;
  // @@protoc_insertion_point(class_scope:bosproto.RemoveBatteryResponse)
 private:
  class _Internal;
  void set_has_success_message();
  void set_has_failure_message();

  inline bool has_return_value() const;
  inline void clear_has_return_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t return_code_;
    union ReturnValueUnion {
      constexpr ReturnValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr success_message_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr failure_message_;
    } return_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battery_2eproto;
};
// -------------------------------------------------------------------

class SetStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosproto.SetStatusResponse) */ {
 public:
  inline SetStatusResponse() : SetStatusResponse(nullptr) {}
  ~SetStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR SetStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetStatusResponse(const SetStatusResponse& from);
  SetStatusResponse(SetStatusResponse&& from) noexcept
    : SetStatusResponse() {
    *this = ::std::move(from);
  }

  inline SetStatusResponse& operator=(const SetStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetStatusResponse& operator=(SetStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetStatusResponse* internal_default_instance() {
    return reinterpret_cast<const SetStatusResponse*>(
               &_SetStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SetStatusResponse& a, SetStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetStatusResponse& from) {
    SetStatusResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosproto.SetStatusResponse";
  }
  protected:
  explicit SetStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kReturnCodeFieldNumber = 1,
  };
  // string reason = 2;
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // int64 return_code = 1;
  void clear_return_code();
  int64_t return_code() const;
  void set_return_code(int64_t value);
  private:
  int64_t _internal_return_code() const;
  void _internal_set_return_code(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:bosproto.SetStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
    int64_t return_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battery_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BatteryStatus

// double voltage_mV = 1;
inline void BatteryStatus::clear_voltage_mv() {
  _impl_.voltage_mv_ = 0;
}
inline double BatteryStatus::_internal_voltage_mv() const {
  return _impl_.voltage_mv_;
}
inline double BatteryStatus::voltage_mv() const {
  // @@protoc_insertion_point(field_get:bosproto.BatteryStatus.voltage_mV)
  return _internal_voltage_mv();
}
inline void BatteryStatus::_internal_set_voltage_mv(double value) {
  
  _impl_.voltage_mv_ = value;
}
inline void BatteryStatus::set_voltage_mv(double value) {
  _internal_set_voltage_mv(value);
  // @@protoc_insertion_point(field_set:bosproto.BatteryStatus.voltage_mV)
}

// double current_mA = 2;
inline void BatteryStatus::clear_current_ma() {
  _impl_.current_ma_ = 0;
}
inline double BatteryStatus::_internal_current_ma() const {
  return _impl_.current_ma_;
}
inline double BatteryStatus::current_ma() const {
  // @@protoc_insertion_point(field_get:bosproto.BatteryStatus.current_mA)
  return _internal_current_ma();
}
inline void BatteryStatus::_internal_set_current_ma(double value) {
  
  _impl_.current_ma_ = value;
}
inline void BatteryStatus::set_current_ma(double value) {
  _internal_set_current_ma(value);
  // @@protoc_insertion_point(field_set:bosproto.BatteryStatus.current_mA)
}

// double capacity_mAh = 3;
inline void BatteryStatus::clear_capacity_mah() {
  _impl_.capacity_mah_ = 0;
}
inline double BatteryStatus::_internal_capacity_mah() const {
  return _impl_.capacity_mah_;
}
inline double BatteryStatus::capacity_mah() const {
  // @@protoc_insertion_point(field_get:bosproto.BatteryStatus.capacity_mAh)
  return _internal_capacity_mah();
}
inline void BatteryStatus::_internal_set_capacity_mah(double value) {
  
  _impl_.capacity_mah_ = value;
}
inline void BatteryStatus::set_capacity_mah(double value) {
  _internal_set_capacity_mah(value);
  // @@protoc_insertion_point(field_set:bosproto.BatteryStatus.capacity_mAh)
}

// double max_capacity_mAh = 4;
inline void BatteryStatus::clear_max_capacity_mah() {
  _impl_.max_capacity_mah_ = 0;
}
inline double BatteryStatus::_internal_max_capacity_mah() const {
  return _impl_.max_capacity_mah_;
}
inline double BatteryStatus::max_capacity_mah() const {
  // @@protoc_insertion_point(field_get:bosproto.BatteryStatus.max_capacity_mAh)
  return _internal_max_capacity_mah();
}
inline void BatteryStatus::_internal_set_max_capacity_mah(double value) {
  
  _impl_.max_capacity_mah_ = value;
}
inline void BatteryStatus::set_max_capacity_mah(double value) {
  _internal_set_max_capacity_mah(value);
  // @@protoc_insertion_point(field_set:bosproto.BatteryStatus.max_capacity_mAh)
}

// double max_charging_current_mA = 5;
inline void BatteryStatus::clear_max_charging_current_ma() {
  _impl_.max_charging_current_ma_ = 0;
}
inline double BatteryStatus::_internal_max_charging_current_ma() const {
  return _impl_.max_charging_current_ma_;
}
inline double BatteryStatus::max_charging_current_ma() const {
  // @@protoc_insertion_point(field_get:bosproto.BatteryStatus.max_charging_current_mA)
  return _internal_max_charging_current_ma();
}
inline void BatteryStatus::_internal_set_max_charging_current_ma(double value) {
  
  _impl_.max_charging_current_ma_ = value;
}
inline void BatteryStatus::set_max_charging_current_ma(double value) {
  _internal_set_max_charging_current_ma(value);
  // @@protoc_insertion_point(field_set:bosproto.BatteryStatus.max_charging_current_mA)
}

// double max_discharging_current_mA = 6;
inline void BatteryStatus::clear_max_discharging_current_ma() {
  _impl_.max_discharging_current_ma_ = 0;
}
inline double BatteryStatus::_internal_max_discharging_current_ma() const {
  return _impl_.max_discharging_current_ma_;
}
inline double BatteryStatus::max_discharging_current_ma() const {
  // @@protoc_insertion_point(field_get:bosproto.BatteryStatus.max_discharging_current_mA)
  return _internal_max_discharging_current_ma();
}
inline void BatteryStatus::_internal_set_max_discharging_current_ma(double value) {
  
  _impl_.max_discharging_current_ma_ = value;
}
inline void BatteryStatus::set_max_discharging_current_ma(double value) {
  _internal_set_max_discharging_current_ma(value);
  // @@protoc_insertion_point(field_set:bosproto.BatteryStatus.max_discharging_current_mA)
}

// uint64 timestamp = 7;
inline void BatteryStatus::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
}
inline uint64_t BatteryStatus::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t BatteryStatus::timestamp() const {
  // @@protoc_insertion_point(field_get:bosproto.BatteryStatus.timestamp)
  return _internal_timestamp();
}
inline void BatteryStatus::_internal_set_timestamp(uint64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void BatteryStatus::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:bosproto.BatteryStatus.timestamp)
}

// -------------------------------------------------------------------

// ScheduleSetCurrent

// double current_mA = 1;
inline void ScheduleSetCurrent::clear_current_ma() {
  _impl_.current_ma_ = 0;
}
inline double ScheduleSetCurrent::_internal_current_ma() const {
  return _impl_.current_ma_;
}
inline double ScheduleSetCurrent::current_ma() const {
  // @@protoc_insertion_point(field_get:bosproto.ScheduleSetCurrent.current_mA)
  return _internal_current_ma();
}
inline void ScheduleSetCurrent::_internal_set_current_ma(double value) {
  
  _impl_.current_ma_ = value;
}
inline void ScheduleSetCurrent::set_current_ma(double value) {
  _internal_set_current_ma(value);
  // @@protoc_insertion_point(field_set:bosproto.ScheduleSetCurrent.current_mA)
}

// uint64 startTime = 2;
inline void ScheduleSetCurrent::clear_starttime() {
  _impl_.starttime_ = uint64_t{0u};
}
inline uint64_t ScheduleSetCurrent::_internal_starttime() const {
  return _impl_.starttime_;
}
inline uint64_t ScheduleSetCurrent::starttime() const {
  // @@protoc_insertion_point(field_get:bosproto.ScheduleSetCurrent.startTime)
  return _internal_starttime();
}
inline void ScheduleSetCurrent::_internal_set_starttime(uint64_t value) {
  
  _impl_.starttime_ = value;
}
inline void ScheduleSetCurrent::set_starttime(uint64_t value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:bosproto.ScheduleSetCurrent.startTime)
}

// uint64 endTime = 3;
inline void ScheduleSetCurrent::clear_endtime() {
  _impl_.endtime_ = uint64_t{0u};
}
inline uint64_t ScheduleSetCurrent::_internal_endtime() const {
  return _impl_.endtime_;
}
inline uint64_t ScheduleSetCurrent::endtime() const {
  // @@protoc_insertion_point(field_get:bosproto.ScheduleSetCurrent.endTime)
  return _internal_endtime();
}
inline void ScheduleSetCurrent::_internal_set_endtime(uint64_t value) {
  
  _impl_.endtime_ = value;
}
inline void ScheduleSetCurrent::set_endtime(uint64_t value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:bosproto.ScheduleSetCurrent.endTime)
}

// -------------------------------------------------------------------

// BatteryCommand

// .bosproto.Command command = 1;
inline void BatteryCommand::clear_command() {
  _impl_.command_ = 0;
}
inline ::bosproto::Command BatteryCommand::_internal_command() const {
  return static_cast< ::bosproto::Command >(_impl_.command_);
}
inline ::bosproto::Command BatteryCommand::command() const {
  // @@protoc_insertion_point(field_get:bosproto.BatteryCommand.command)
  return _internal_command();
}
inline void BatteryCommand::_internal_set_command(::bosproto::Command value) {
  
  _impl_.command_ = value;
}
inline void BatteryCommand::set_command(::bosproto::Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:bosproto.BatteryCommand.command)
}

// .bosproto.BatteryStatus status = 2;
inline bool BatteryCommand::_internal_has_status() const {
  return schedule_parameters_case() == kStatus;
}
inline bool BatteryCommand::has_status() const {
  return _internal_has_status();
}
inline void BatteryCommand::set_has_status() {
  _impl_._oneof_case_[0] = kStatus;
}
inline void BatteryCommand::clear_status() {
  if (_internal_has_status()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.schedule_parameters_.status_;
    }
    clear_has_schedule_parameters();
  }
}
inline ::bosproto::BatteryStatus* BatteryCommand::release_status() {
  // @@protoc_insertion_point(field_release:bosproto.BatteryCommand.status)
  if (_internal_has_status()) {
    clear_has_schedule_parameters();
    ::bosproto::BatteryStatus* temp = _impl_.schedule_parameters_.status_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.schedule_parameters_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosproto::BatteryStatus& BatteryCommand::_internal_status() const {
  return _internal_has_status()
      ? *_impl_.schedule_parameters_.status_
      : reinterpret_cast< ::bosproto::BatteryStatus&>(::bosproto::_BatteryStatus_default_instance_);
}
inline const ::bosproto::BatteryStatus& BatteryCommand::status() const {
  // @@protoc_insertion_point(field_get:bosproto.BatteryCommand.status)
  return _internal_status();
}
inline ::bosproto::BatteryStatus* BatteryCommand::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosproto.BatteryCommand.status)
  if (_internal_has_status()) {
    clear_has_schedule_parameters();
    ::bosproto::BatteryStatus* temp = _impl_.schedule_parameters_.status_;
    _impl_.schedule_parameters_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatteryCommand::unsafe_arena_set_allocated_status(::bosproto::BatteryStatus* status) {
  clear_schedule_parameters();
  if (status) {
    set_has_status();
    _impl_.schedule_parameters_.status_ = status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosproto.BatteryCommand.status)
}
inline ::bosproto::BatteryStatus* BatteryCommand::_internal_mutable_status() {
  if (!_internal_has_status()) {
    clear_schedule_parameters();
    set_has_status();
    _impl_.schedule_parameters_.status_ = CreateMaybeMessage< ::bosproto::BatteryStatus >(GetArenaForAllocation());
  }
  return _impl_.schedule_parameters_.status_;
}
inline ::bosproto::BatteryStatus* BatteryCommand::mutable_status() {
  ::bosproto::BatteryStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:bosproto.BatteryCommand.status)
  return _msg;
}

// .bosproto.ScheduleSetCurrent schedule_set_current = 3;
inline bool BatteryCommand::_internal_has_schedule_set_current() const {
  return schedule_parameters_case() == kScheduleSetCurrent;
}
inline bool BatteryCommand::has_schedule_set_current() const {
  return _internal_has_schedule_set_current();
}
inline void BatteryCommand::set_has_schedule_set_current() {
  _impl_._oneof_case_[0] = kScheduleSetCurrent;
}
inline void BatteryCommand::clear_schedule_set_current() {
  if (_internal_has_schedule_set_current()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.schedule_parameters_.schedule_set_current_;
    }
    clear_has_schedule_parameters();
  }
}
inline ::bosproto::ScheduleSetCurrent* BatteryCommand::release_schedule_set_current() {
  // @@protoc_insertion_point(field_release:bosproto.BatteryCommand.schedule_set_current)
  if (_internal_has_schedule_set_current()) {
    clear_has_schedule_parameters();
    ::bosproto::ScheduleSetCurrent* temp = _impl_.schedule_parameters_.schedule_set_current_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.schedule_parameters_.schedule_set_current_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosproto::ScheduleSetCurrent& BatteryCommand::_internal_schedule_set_current() const {
  return _internal_has_schedule_set_current()
      ? *_impl_.schedule_parameters_.schedule_set_current_
      : reinterpret_cast< ::bosproto::ScheduleSetCurrent&>(::bosproto::_ScheduleSetCurrent_default_instance_);
}
inline const ::bosproto::ScheduleSetCurrent& BatteryCommand::schedule_set_current() const {
  // @@protoc_insertion_point(field_get:bosproto.BatteryCommand.schedule_set_current)
  return _internal_schedule_set_current();
}
inline ::bosproto::ScheduleSetCurrent* BatteryCommand::unsafe_arena_release_schedule_set_current() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosproto.BatteryCommand.schedule_set_current)
  if (_internal_has_schedule_set_current()) {
    clear_has_schedule_parameters();
    ::bosproto::ScheduleSetCurrent* temp = _impl_.schedule_parameters_.schedule_set_current_;
    _impl_.schedule_parameters_.schedule_set_current_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatteryCommand::unsafe_arena_set_allocated_schedule_set_current(::bosproto::ScheduleSetCurrent* schedule_set_current) {
  clear_schedule_parameters();
  if (schedule_set_current) {
    set_has_schedule_set_current();
    _impl_.schedule_parameters_.schedule_set_current_ = schedule_set_current;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosproto.BatteryCommand.schedule_set_current)
}
inline ::bosproto::ScheduleSetCurrent* BatteryCommand::_internal_mutable_schedule_set_current() {
  if (!_internal_has_schedule_set_current()) {
    clear_schedule_parameters();
    set_has_schedule_set_current();
    _impl_.schedule_parameters_.schedule_set_current_ = CreateMaybeMessage< ::bosproto::ScheduleSetCurrent >(GetArenaForAllocation());
  }
  return _impl_.schedule_parameters_.schedule_set_current_;
}
inline ::bosproto::ScheduleSetCurrent* BatteryCommand::mutable_schedule_set_current() {
  ::bosproto::ScheduleSetCurrent* _msg = _internal_mutable_schedule_set_current();
  // @@protoc_insertion_point(field_mutable:bosproto.BatteryCommand.schedule_set_current)
  return _msg;
}

inline bool BatteryCommand::has_schedule_parameters() const {
  return schedule_parameters_case() != SCHEDULE_PARAMETERS_NOT_SET;
}
inline void BatteryCommand::clear_has_schedule_parameters() {
  _impl_._oneof_case_[0] = SCHEDULE_PARAMETERS_NOT_SET;
}
inline BatteryCommand::ScheduleParametersCase BatteryCommand::schedule_parameters_case() const {
  return BatteryCommand::ScheduleParametersCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// BatteryStatusResponse

// int64 return_code = 1;
inline void BatteryStatusResponse::clear_return_code() {
  _impl_.return_code_ = int64_t{0};
}
inline int64_t BatteryStatusResponse::_internal_return_code() const {
  return _impl_.return_code_;
}
inline int64_t BatteryStatusResponse::return_code() const {
  // @@protoc_insertion_point(field_get:bosproto.BatteryStatusResponse.return_code)
  return _internal_return_code();
}
inline void BatteryStatusResponse::_internal_set_return_code(int64_t value) {
  
  _impl_.return_code_ = value;
}
inline void BatteryStatusResponse::set_return_code(int64_t value) {
  _internal_set_return_code(value);
  // @@protoc_insertion_point(field_set:bosproto.BatteryStatusResponse.return_code)
}

// string fail_reason = 2;
inline bool BatteryStatusResponse::_internal_has_fail_reason() const {
  return return_value_case() == kFailReason;
}
inline bool BatteryStatusResponse::has_fail_reason() const {
  return _internal_has_fail_reason();
}
inline void BatteryStatusResponse::set_has_fail_reason() {
  _impl_._oneof_case_[0] = kFailReason;
}
inline void BatteryStatusResponse::clear_fail_reason() {
  if (_internal_has_fail_reason()) {
    _impl_.return_value_.fail_reason_.Destroy();
    clear_has_return_value();
  }
}
inline const std::string& BatteryStatusResponse::fail_reason() const {
  // @@protoc_insertion_point(field_get:bosproto.BatteryStatusResponse.fail_reason)
  return _internal_fail_reason();
}
template <typename ArgT0, typename... ArgT>
inline void BatteryStatusResponse::set_fail_reason(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_fail_reason()) {
    clear_return_value();
    set_has_fail_reason();
    _impl_.return_value_.fail_reason_.InitDefault();
  }
  _impl_.return_value_.fail_reason_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosproto.BatteryStatusResponse.fail_reason)
}
inline std::string* BatteryStatusResponse::mutable_fail_reason() {
  std::string* _s = _internal_mutable_fail_reason();
  // @@protoc_insertion_point(field_mutable:bosproto.BatteryStatusResponse.fail_reason)
  return _s;
}
inline const std::string& BatteryStatusResponse::_internal_fail_reason() const {
  if (_internal_has_fail_reason()) {
    return _impl_.return_value_.fail_reason_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void BatteryStatusResponse::_internal_set_fail_reason(const std::string& value) {
  if (!_internal_has_fail_reason()) {
    clear_return_value();
    set_has_fail_reason();
    _impl_.return_value_.fail_reason_.InitDefault();
  }
  _impl_.return_value_.fail_reason_.Set(value, GetArenaForAllocation());
}
inline std::string* BatteryStatusResponse::_internal_mutable_fail_reason() {
  if (!_internal_has_fail_reason()) {
    clear_return_value();
    set_has_fail_reason();
    _impl_.return_value_.fail_reason_.InitDefault();
  }
  return _impl_.return_value_.fail_reason_.Mutable(      GetArenaForAllocation());
}
inline std::string* BatteryStatusResponse::release_fail_reason() {
  // @@protoc_insertion_point(field_release:bosproto.BatteryStatusResponse.fail_reason)
  if (_internal_has_fail_reason()) {
    clear_has_return_value();
    return _impl_.return_value_.fail_reason_.Release();
  } else {
    return nullptr;
  }
}
inline void BatteryStatusResponse::set_allocated_fail_reason(std::string* fail_reason) {
  if (has_return_value()) {
    clear_return_value();
  }
  if (fail_reason != nullptr) {
    set_has_fail_reason();
    _impl_.return_value_.fail_reason_.InitAllocated(fail_reason, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:bosproto.BatteryStatusResponse.fail_reason)
}

// .bosproto.BatteryStatus status = 3;
inline bool BatteryStatusResponse::_internal_has_status() const {
  return return_value_case() == kStatus;
}
inline bool BatteryStatusResponse::has_status() const {
  return _internal_has_status();
}
inline void BatteryStatusResponse::set_has_status() {
  _impl_._oneof_case_[0] = kStatus;
}
inline void BatteryStatusResponse::clear_status() {
  if (_internal_has_status()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.return_value_.status_;
    }
    clear_has_return_value();
  }
}
inline ::bosproto::BatteryStatus* BatteryStatusResponse::release_status() {
  // @@protoc_insertion_point(field_release:bosproto.BatteryStatusResponse.status)
  if (_internal_has_status()) {
    clear_has_return_value();
    ::bosproto::BatteryStatus* temp = _impl_.return_value_.status_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.return_value_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosproto::BatteryStatus& BatteryStatusResponse::_internal_status() const {
  return _internal_has_status()
      ? *_impl_.return_value_.status_
      : reinterpret_cast< ::bosproto::BatteryStatus&>(::bosproto::_BatteryStatus_default_instance_);
}
inline const ::bosproto::BatteryStatus& BatteryStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:bosproto.BatteryStatusResponse.status)
  return _internal_status();
}
inline ::bosproto::BatteryStatus* BatteryStatusResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosproto.BatteryStatusResponse.status)
  if (_internal_has_status()) {
    clear_has_return_value();
    ::bosproto::BatteryStatus* temp = _impl_.return_value_.status_;
    _impl_.return_value_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BatteryStatusResponse::unsafe_arena_set_allocated_status(::bosproto::BatteryStatus* status) {
  clear_return_value();
  if (status) {
    set_has_status();
    _impl_.return_value_.status_ = status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosproto.BatteryStatusResponse.status)
}
inline ::bosproto::BatteryStatus* BatteryStatusResponse::_internal_mutable_status() {
  if (!_internal_has_status()) {
    clear_return_value();
    set_has_status();
    _impl_.return_value_.status_ = CreateMaybeMessage< ::bosproto::BatteryStatus >(GetArenaForAllocation());
  }
  return _impl_.return_value_.status_;
}
inline ::bosproto::BatteryStatus* BatteryStatusResponse::mutable_status() {
  ::bosproto::BatteryStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:bosproto.BatteryStatusResponse.status)
  return _msg;
}

inline bool BatteryStatusResponse::has_return_value() const {
  return return_value_case() != RETURN_VALUE_NOT_SET;
}
inline void BatteryStatusResponse::clear_has_return_value() {
  _impl_._oneof_case_[0] = RETURN_VALUE_NOT_SET;
}
inline BatteryStatusResponse::ReturnValueCase BatteryStatusResponse::return_value_case() const {
  return BatteryStatusResponse::ReturnValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ScheduleSetCurrentResponse

// int64 return_code = 1;
inline void ScheduleSetCurrentResponse::clear_return_code() {
  _impl_.return_code_ = int64_t{0};
}
inline int64_t ScheduleSetCurrentResponse::_internal_return_code() const {
  return _impl_.return_code_;
}
inline int64_t ScheduleSetCurrentResponse::return_code() const {
  // @@protoc_insertion_point(field_get:bosproto.ScheduleSetCurrentResponse.return_code)
  return _internal_return_code();
}
inline void ScheduleSetCurrentResponse::_internal_set_return_code(int64_t value) {
  
  _impl_.return_code_ = value;
}
inline void ScheduleSetCurrentResponse::set_return_code(int64_t value) {
  _internal_set_return_code(value);
  // @@protoc_insertion_point(field_set:bosproto.ScheduleSetCurrentResponse.return_code)
}

// string success_message = 2;
inline bool ScheduleSetCurrentResponse::_internal_has_success_message() const {
  return return_value_case() == kSuccessMessage;
}
inline bool ScheduleSetCurrentResponse::has_success_message() const {
  return _internal_has_success_message();
}
inline void ScheduleSetCurrentResponse::set_has_success_message() {
  _impl_._oneof_case_[0] = kSuccessMessage;
}
inline void ScheduleSetCurrentResponse::clear_success_message() {
  if (_internal_has_success_message()) {
    _impl_.return_value_.success_message_.Destroy();
    clear_has_return_value();
  }
}
inline const std::string& ScheduleSetCurrentResponse::success_message() const {
  // @@protoc_insertion_point(field_get:bosproto.ScheduleSetCurrentResponse.success_message)
  return _internal_success_message();
}
template <typename ArgT0, typename... ArgT>
inline void ScheduleSetCurrentResponse::set_success_message(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_success_message()) {
    clear_return_value();
    set_has_success_message();
    _impl_.return_value_.success_message_.InitDefault();
  }
  _impl_.return_value_.success_message_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosproto.ScheduleSetCurrentResponse.success_message)
}
inline std::string* ScheduleSetCurrentResponse::mutable_success_message() {
  std::string* _s = _internal_mutable_success_message();
  // @@protoc_insertion_point(field_mutable:bosproto.ScheduleSetCurrentResponse.success_message)
  return _s;
}
inline const std::string& ScheduleSetCurrentResponse::_internal_success_message() const {
  if (_internal_has_success_message()) {
    return _impl_.return_value_.success_message_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ScheduleSetCurrentResponse::_internal_set_success_message(const std::string& value) {
  if (!_internal_has_success_message()) {
    clear_return_value();
    set_has_success_message();
    _impl_.return_value_.success_message_.InitDefault();
  }
  _impl_.return_value_.success_message_.Set(value, GetArenaForAllocation());
}
inline std::string* ScheduleSetCurrentResponse::_internal_mutable_success_message() {
  if (!_internal_has_success_message()) {
    clear_return_value();
    set_has_success_message();
    _impl_.return_value_.success_message_.InitDefault();
  }
  return _impl_.return_value_.success_message_.Mutable(      GetArenaForAllocation());
}
inline std::string* ScheduleSetCurrentResponse::release_success_message() {
  // @@protoc_insertion_point(field_release:bosproto.ScheduleSetCurrentResponse.success_message)
  if (_internal_has_success_message()) {
    clear_has_return_value();
    return _impl_.return_value_.success_message_.Release();
  } else {
    return nullptr;
  }
}
inline void ScheduleSetCurrentResponse::set_allocated_success_message(std::string* success_message) {
  if (has_return_value()) {
    clear_return_value();
  }
  if (success_message != nullptr) {
    set_has_success_message();
    _impl_.return_value_.success_message_.InitAllocated(success_message, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:bosproto.ScheduleSetCurrentResponse.success_message)
}

// string failure_message = 3;
inline bool ScheduleSetCurrentResponse::_internal_has_failure_message() const {
  return return_value_case() == kFailureMessage;
}
inline bool ScheduleSetCurrentResponse::has_failure_message() const {
  return _internal_has_failure_message();
}
inline void ScheduleSetCurrentResponse::set_has_failure_message() {
  _impl_._oneof_case_[0] = kFailureMessage;
}
inline void ScheduleSetCurrentResponse::clear_failure_message() {
  if (_internal_has_failure_message()) {
    _impl_.return_value_.failure_message_.Destroy();
    clear_has_return_value();
  }
}
inline const std::string& ScheduleSetCurrentResponse::failure_message() const {
  // @@protoc_insertion_point(field_get:bosproto.ScheduleSetCurrentResponse.failure_message)
  return _internal_failure_message();
}
template <typename ArgT0, typename... ArgT>
inline void ScheduleSetCurrentResponse::set_failure_message(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_failure_message()) {
    clear_return_value();
    set_has_failure_message();
    _impl_.return_value_.failure_message_.InitDefault();
  }
  _impl_.return_value_.failure_message_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosproto.ScheduleSetCurrentResponse.failure_message)
}
inline std::string* ScheduleSetCurrentResponse::mutable_failure_message() {
  std::string* _s = _internal_mutable_failure_message();
  // @@protoc_insertion_point(field_mutable:bosproto.ScheduleSetCurrentResponse.failure_message)
  return _s;
}
inline const std::string& ScheduleSetCurrentResponse::_internal_failure_message() const {
  if (_internal_has_failure_message()) {
    return _impl_.return_value_.failure_message_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ScheduleSetCurrentResponse::_internal_set_failure_message(const std::string& value) {
  if (!_internal_has_failure_message()) {
    clear_return_value();
    set_has_failure_message();
    _impl_.return_value_.failure_message_.InitDefault();
  }
  _impl_.return_value_.failure_message_.Set(value, GetArenaForAllocation());
}
inline std::string* ScheduleSetCurrentResponse::_internal_mutable_failure_message() {
  if (!_internal_has_failure_message()) {
    clear_return_value();
    set_has_failure_message();
    _impl_.return_value_.failure_message_.InitDefault();
  }
  return _impl_.return_value_.failure_message_.Mutable(      GetArenaForAllocation());
}
inline std::string* ScheduleSetCurrentResponse::release_failure_message() {
  // @@protoc_insertion_point(field_release:bosproto.ScheduleSetCurrentResponse.failure_message)
  if (_internal_has_failure_message()) {
    clear_has_return_value();
    return _impl_.return_value_.failure_message_.Release();
  } else {
    return nullptr;
  }
}
inline void ScheduleSetCurrentResponse::set_allocated_failure_message(std::string* failure_message) {
  if (has_return_value()) {
    clear_return_value();
  }
  if (failure_message != nullptr) {
    set_has_failure_message();
    _impl_.return_value_.failure_message_.InitAllocated(failure_message, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:bosproto.ScheduleSetCurrentResponse.failure_message)
}

inline bool ScheduleSetCurrentResponse::has_return_value() const {
  return return_value_case() != RETURN_VALUE_NOT_SET;
}
inline void ScheduleSetCurrentResponse::clear_has_return_value() {
  _impl_._oneof_case_[0] = RETURN_VALUE_NOT_SET;
}
inline ScheduleSetCurrentResponse::ReturnValueCase ScheduleSetCurrentResponse::return_value_case() const {
  return ScheduleSetCurrentResponse::ReturnValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// RemoveBatteryResponse

// int64 return_code = 1;
inline void RemoveBatteryResponse::clear_return_code() {
  _impl_.return_code_ = int64_t{0};
}
inline int64_t RemoveBatteryResponse::_internal_return_code() const {
  return _impl_.return_code_;
}
inline int64_t RemoveBatteryResponse::return_code() const {
  // @@protoc_insertion_point(field_get:bosproto.RemoveBatteryResponse.return_code)
  return _internal_return_code();
}
inline void RemoveBatteryResponse::_internal_set_return_code(int64_t value) {
  
  _impl_.return_code_ = value;
}
inline void RemoveBatteryResponse::set_return_code(int64_t value) {
  _internal_set_return_code(value);
  // @@protoc_insertion_point(field_set:bosproto.RemoveBatteryResponse.return_code)
}

// string success_message = 2;
inline bool RemoveBatteryResponse::_internal_has_success_message() const {
  return return_value_case() == kSuccessMessage;
}
inline bool RemoveBatteryResponse::has_success_message() const {
  return _internal_has_success_message();
}
inline void RemoveBatteryResponse::set_has_success_message() {
  _impl_._oneof_case_[0] = kSuccessMessage;
}
inline void RemoveBatteryResponse::clear_success_message() {
  if (_internal_has_success_message()) {
    _impl_.return_value_.success_message_.Destroy();
    clear_has_return_value();
  }
}
inline const std::string& RemoveBatteryResponse::success_message() const {
  // @@protoc_insertion_point(field_get:bosproto.RemoveBatteryResponse.success_message)
  return _internal_success_message();
}
template <typename ArgT0, typename... ArgT>
inline void RemoveBatteryResponse::set_success_message(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_success_message()) {
    clear_return_value();
    set_has_success_message();
    _impl_.return_value_.success_message_.InitDefault();
  }
  _impl_.return_value_.success_message_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosproto.RemoveBatteryResponse.success_message)
}
inline std::string* RemoveBatteryResponse::mutable_success_message() {
  std::string* _s = _internal_mutable_success_message();
  // @@protoc_insertion_point(field_mutable:bosproto.RemoveBatteryResponse.success_message)
  return _s;
}
inline const std::string& RemoveBatteryResponse::_internal_success_message() const {
  if (_internal_has_success_message()) {
    return _impl_.return_value_.success_message_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RemoveBatteryResponse::_internal_set_success_message(const std::string& value) {
  if (!_internal_has_success_message()) {
    clear_return_value();
    set_has_success_message();
    _impl_.return_value_.success_message_.InitDefault();
  }
  _impl_.return_value_.success_message_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoveBatteryResponse::_internal_mutable_success_message() {
  if (!_internal_has_success_message()) {
    clear_return_value();
    set_has_success_message();
    _impl_.return_value_.success_message_.InitDefault();
  }
  return _impl_.return_value_.success_message_.Mutable(      GetArenaForAllocation());
}
inline std::string* RemoveBatteryResponse::release_success_message() {
  // @@protoc_insertion_point(field_release:bosproto.RemoveBatteryResponse.success_message)
  if (_internal_has_success_message()) {
    clear_has_return_value();
    return _impl_.return_value_.success_message_.Release();
  } else {
    return nullptr;
  }
}
inline void RemoveBatteryResponse::set_allocated_success_message(std::string* success_message) {
  if (has_return_value()) {
    clear_return_value();
  }
  if (success_message != nullptr) {
    set_has_success_message();
    _impl_.return_value_.success_message_.InitAllocated(success_message, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:bosproto.RemoveBatteryResponse.success_message)
}

// string failure_message = 3;
inline bool RemoveBatteryResponse::_internal_has_failure_message() const {
  return return_value_case() == kFailureMessage;
}
inline bool RemoveBatteryResponse::has_failure_message() const {
  return _internal_has_failure_message();
}
inline void RemoveBatteryResponse::set_has_failure_message() {
  _impl_._oneof_case_[0] = kFailureMessage;
}
inline void RemoveBatteryResponse::clear_failure_message() {
  if (_internal_has_failure_message()) {
    _impl_.return_value_.failure_message_.Destroy();
    clear_has_return_value();
  }
}
inline const std::string& RemoveBatteryResponse::failure_message() const {
  // @@protoc_insertion_point(field_get:bosproto.RemoveBatteryResponse.failure_message)
  return _internal_failure_message();
}
template <typename ArgT0, typename... ArgT>
inline void RemoveBatteryResponse::set_failure_message(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_failure_message()) {
    clear_return_value();
    set_has_failure_message();
    _impl_.return_value_.failure_message_.InitDefault();
  }
  _impl_.return_value_.failure_message_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosproto.RemoveBatteryResponse.failure_message)
}
inline std::string* RemoveBatteryResponse::mutable_failure_message() {
  std::string* _s = _internal_mutable_failure_message();
  // @@protoc_insertion_point(field_mutable:bosproto.RemoveBatteryResponse.failure_message)
  return _s;
}
inline const std::string& RemoveBatteryResponse::_internal_failure_message() const {
  if (_internal_has_failure_message()) {
    return _impl_.return_value_.failure_message_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RemoveBatteryResponse::_internal_set_failure_message(const std::string& value) {
  if (!_internal_has_failure_message()) {
    clear_return_value();
    set_has_failure_message();
    _impl_.return_value_.failure_message_.InitDefault();
  }
  _impl_.return_value_.failure_message_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoveBatteryResponse::_internal_mutable_failure_message() {
  if (!_internal_has_failure_message()) {
    clear_return_value();
    set_has_failure_message();
    _impl_.return_value_.failure_message_.InitDefault();
  }
  return _impl_.return_value_.failure_message_.Mutable(      GetArenaForAllocation());
}
inline std::string* RemoveBatteryResponse::release_failure_message() {
  // @@protoc_insertion_point(field_release:bosproto.RemoveBatteryResponse.failure_message)
  if (_internal_has_failure_message()) {
    clear_has_return_value();
    return _impl_.return_value_.failure_message_.Release();
  } else {
    return nullptr;
  }
}
inline void RemoveBatteryResponse::set_allocated_failure_message(std::string* failure_message) {
  if (has_return_value()) {
    clear_return_value();
  }
  if (failure_message != nullptr) {
    set_has_failure_message();
    _impl_.return_value_.failure_message_.InitAllocated(failure_message, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:bosproto.RemoveBatteryResponse.failure_message)
}

inline bool RemoveBatteryResponse::has_return_value() const {
  return return_value_case() != RETURN_VALUE_NOT_SET;
}
inline void RemoveBatteryResponse::clear_has_return_value() {
  _impl_._oneof_case_[0] = RETURN_VALUE_NOT_SET;
}
inline RemoveBatteryResponse::ReturnValueCase RemoveBatteryResponse::return_value_case() const {
  return RemoveBatteryResponse::ReturnValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// SetStatusResponse

// int64 return_code = 1;
inline void SetStatusResponse::clear_return_code() {
  _impl_.return_code_ = int64_t{0};
}
inline int64_t SetStatusResponse::_internal_return_code() const {
  return _impl_.return_code_;
}
inline int64_t SetStatusResponse::return_code() const {
  // @@protoc_insertion_point(field_get:bosproto.SetStatusResponse.return_code)
  return _internal_return_code();
}
inline void SetStatusResponse::_internal_set_return_code(int64_t value) {
  
  _impl_.return_code_ = value;
}
inline void SetStatusResponse::set_return_code(int64_t value) {
  _internal_set_return_code(value);
  // @@protoc_insertion_point(field_set:bosproto.SetStatusResponse.return_code)
}

// string reason = 2;
inline void SetStatusResponse::clear_reason() {
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& SetStatusResponse::reason() const {
  // @@protoc_insertion_point(field_get:bosproto.SetStatusResponse.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetStatusResponse::set_reason(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bosproto.SetStatusResponse.reason)
}
inline std::string* SetStatusResponse::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:bosproto.SetStatusResponse.reason)
  return _s;
}
inline const std::string& SetStatusResponse::_internal_reason() const {
  return _impl_.reason_.Get();
}
inline void SetStatusResponse::_internal_set_reason(const std::string& value) {
  
  _impl_.reason_.Set(value, GetArenaForAllocation());
}
inline std::string* SetStatusResponse::_internal_mutable_reason() {
  
  return _impl_.reason_.Mutable(GetArenaForAllocation());
}
inline std::string* SetStatusResponse::release_reason() {
  // @@protoc_insertion_point(field_release:bosproto.SetStatusResponse.reason)
  return _impl_.reason_.Release();
}
inline void SetStatusResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  _impl_.reason_.SetAllocated(reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:bosproto.SetStatusResponse.reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bosproto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosproto::Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosproto::Command>() {
  return ::bosproto::Command_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_battery_2eproto
