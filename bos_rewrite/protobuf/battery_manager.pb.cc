// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battery_manager.proto

#include "battery_manager.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace bosproto {
PROTOBUF_CONSTEXPR Scale::Scale(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.charge_proportion_)*/0
  , /*decltype(_impl_.capacity_proportion_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScaleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScaleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScaleDefaultTypeInternal() {}
  union {
    Scale _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScaleDefaultTypeInternal _Scale_default_instance_;
PROTOBUF_CONSTEXPR Physical_Battery::Physical_Battery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.batteryname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.max_staleness_)*/uint64_t{0u}
  , /*decltype(_impl_.refresh_mode_)*/0} {}
struct Physical_BatteryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Physical_BatteryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Physical_BatteryDefaultTypeInternal() {}
  union {
    Physical_Battery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Physical_BatteryDefaultTypeInternal _Physical_Battery_default_instance_;
PROTOBUF_CONSTEXPR Dynamic_Battery::Dynamic_Battery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.arguments_)*/{}
  , /*decltype(_impl_.batteryname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.refresh_func_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.destructor_func_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.constructor_func_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.set_current_func_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.max_staleness_)*/uint64_t{0u}
  , /*decltype(_impl_.refresh_mode_)*/0} {}
struct Dynamic_BatteryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Dynamic_BatteryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Dynamic_BatteryDefaultTypeInternal() {}
  union {
    Dynamic_Battery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Dynamic_BatteryDefaultTypeInternal _Dynamic_Battery_default_instance_;
PROTOBUF_CONSTEXPR Aggregate_Battery::Aggregate_Battery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parentnames_)*/{}
  , /*decltype(_impl_.batteryname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.max_staleness_)*/uint64_t{0u}
  , /*decltype(_impl_.refresh_mode_)*/0} {}
struct Aggregate_BatteryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Aggregate_BatteryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Aggregate_BatteryDefaultTypeInternal() {}
  union {
    Aggregate_Battery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Aggregate_BatteryDefaultTypeInternal _Aggregate_Battery_default_instance_;
PROTOBUF_CONSTEXPR Partition_Battery::Partition_Battery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.names_)*/{}
  , /*decltype(_impl_.scales_)*/{}
  , /*decltype(_impl_.max_stalenesses_)*/{}
  , /*decltype(_impl_._max_stalenesses_cached_byte_size_)*/{0}
  , /*decltype(_impl_.refresh_modes_)*/{}
  , /*decltype(_impl_._refresh_modes_cached_byte_size_)*/{0}
  , /*decltype(_impl_.sourcename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.policy_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Partition_BatteryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Partition_BatteryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Partition_BatteryDefaultTypeInternal() {}
  union {
    Partition_Battery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Partition_BatteryDefaultTypeInternal _Partition_Battery_default_instance_;
PROTOBUF_CONSTEXPR Admin_Command::Admin_Command(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.command_options_)*/0
  , /*decltype(_impl_.command_parameters_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Admin_CommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Admin_CommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Admin_CommandDefaultTypeInternal() {}
  union {
    Admin_Command _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Admin_CommandDefaultTypeInternal _Admin_Command_default_instance_;
PROTOBUF_CONSTEXPR AdminResponse::AdminResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.return_code_)*/int64_t{0}
  , /*decltype(_impl_.return_value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AdminResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdminResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdminResponseDefaultTypeInternal() {}
  union {
    AdminResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdminResponseDefaultTypeInternal _AdminResponse_default_instance_;
}  // namespace bosproto
static ::_pb::Metadata file_level_metadata_battery_5fmanager_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_battery_5fmanager_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_battery_5fmanager_2eproto = nullptr;

const uint32_t TableStruct_battery_5fmanager_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosproto::Scale, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bosproto::Scale, _impl_.charge_proportion_),
  PROTOBUF_FIELD_OFFSET(::bosproto::Scale, _impl_.capacity_proportion_),
  PROTOBUF_FIELD_OFFSET(::bosproto::Physical_Battery, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::bosproto::Physical_Battery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bosproto::Physical_Battery, _impl_.batteryname_),
  PROTOBUF_FIELD_OFFSET(::bosproto::Physical_Battery, _impl_.max_staleness_),
  PROTOBUF_FIELD_OFFSET(::bosproto::Physical_Battery, _impl_.refresh_mode_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bosproto::Dynamic_Battery, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::bosproto::Dynamic_Battery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bosproto::Dynamic_Battery, _impl_.batteryname_),
  PROTOBUF_FIELD_OFFSET(::bosproto::Dynamic_Battery, _impl_.refresh_func_),
  PROTOBUF_FIELD_OFFSET(::bosproto::Dynamic_Battery, _impl_.destructor_func_),
  PROTOBUF_FIELD_OFFSET(::bosproto::Dynamic_Battery, _impl_.constructor_func_),
  PROTOBUF_FIELD_OFFSET(::bosproto::Dynamic_Battery, _impl_.set_current_func_),
  PROTOBUF_FIELD_OFFSET(::bosproto::Dynamic_Battery, _impl_.arguments_),
  PROTOBUF_FIELD_OFFSET(::bosproto::Dynamic_Battery, _impl_.max_staleness_),
  PROTOBUF_FIELD_OFFSET(::bosproto::Dynamic_Battery, _impl_.refresh_mode_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bosproto::Aggregate_Battery, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::bosproto::Aggregate_Battery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bosproto::Aggregate_Battery, _impl_.batteryname_),
  PROTOBUF_FIELD_OFFSET(::bosproto::Aggregate_Battery, _impl_.parentnames_),
  PROTOBUF_FIELD_OFFSET(::bosproto::Aggregate_Battery, _impl_.max_staleness_),
  PROTOBUF_FIELD_OFFSET(::bosproto::Aggregate_Battery, _impl_.refresh_mode_),
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosproto::Partition_Battery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bosproto::Partition_Battery, _impl_.sourcename_),
  PROTOBUF_FIELD_OFFSET(::bosproto::Partition_Battery, _impl_.policy_),
  PROTOBUF_FIELD_OFFSET(::bosproto::Partition_Battery, _impl_.names_),
  PROTOBUF_FIELD_OFFSET(::bosproto::Partition_Battery, _impl_.scales_),
  PROTOBUF_FIELD_OFFSET(::bosproto::Partition_Battery, _impl_.max_stalenesses_),
  PROTOBUF_FIELD_OFFSET(::bosproto::Partition_Battery, _impl_.refresh_modes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosproto::Admin_Command, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bosproto::Admin_Command, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bosproto::Admin_Command, _impl_.command_options_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::bosproto::Admin_Command, _impl_.command_parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosproto::AdminResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bosproto::AdminResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bosproto::AdminResponse, _impl_.return_code_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::bosproto::AdminResponse, _impl_.return_value_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::bosproto::Scale)},
  { 8, 17, -1, sizeof(::bosproto::Physical_Battery)},
  { 20, 34, -1, sizeof(::bosproto::Dynamic_Battery)},
  { 42, 52, -1, sizeof(::bosproto::Aggregate_Battery)},
  { 56, -1, -1, sizeof(::bosproto::Partition_Battery)},
  { 68, -1, -1, sizeof(::bosproto::Admin_Command)},
  { 79, -1, -1, sizeof(::bosproto::AdminResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::bosproto::_Scale_default_instance_._instance,
  &::bosproto::_Physical_Battery_default_instance_._instance,
  &::bosproto::_Dynamic_Battery_default_instance_._instance,
  &::bosproto::_Aggregate_Battery_default_instance_._instance,
  &::bosproto::_Partition_Battery_default_instance_._instance,
  &::bosproto::_Admin_Command_default_instance_._instance,
  &::bosproto::_AdminResponse_default_instance_._instance,
};

const char descriptor_table_protodef_battery_5fmanager_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025battery_manager.proto\022\010bosproto\"\?\n\005Sca"
  "le\022\031\n\021charge_proportion\030\001 \001(\001\022\033\n\023capacit"
  "y_proportion\030\002 \001(\001\"\224\001\n\020Physical_Battery\022"
  "\023\n\013batteryName\030\001 \001(\t\022\032\n\rmax_staleness\030\002 "
  "\001(\004H\000\210\001\001\022,\n\014refresh_mode\030\003 \001(\0162\021.bosprot"
  "o.RefreshH\001\210\001\001B\020\n\016_max_stalenessB\017\n\r_ref"
  "resh_mode\"\211\002\n\017Dynamic_Battery\022\023\n\013battery"
  "Name\030\001 \001(\t\022\024\n\014refresh_func\030\002 \001(\t\022\027\n\017dest"
  "ructor_func\030\003 \001(\t\022\030\n\020constructor_func\030\004 "
  "\001(\t\022\030\n\020set_current_func\030\005 \001(\t\022\021\n\targumen"
  "ts\030\006 \003(\t\022\032\n\rmax_staleness\030\007 \001(\004H\000\210\001\001\022,\n\014"
  "refresh_mode\030\010 \001(\0162\021.bosproto.RefreshH\001\210"
  "\001\001B\020\n\016_max_stalenessB\017\n\r_refresh_mode\"\252\001"
  "\n\021Aggregate_Battery\022\023\n\013batteryName\030\001 \001(\t"
  "\022\023\n\013parentNames\030\002 \003(\t\022\032\n\rmax_staleness\030\003"
  " \001(\004H\000\210\001\001\022,\n\014refresh_mode\030\004 \001(\0162\021.bospro"
  "to.RefreshH\001\210\001\001B\020\n\016_max_stalenessB\017\n\r_re"
  "fresh_mode\"\274\001\n\021Partition_Battery\022\022\n\nsour"
  "ceName\030\001 \001(\t\022 \n\006policy\030\002 \001(\0162\020.bosproto."
  "Policy\022\r\n\005names\030\003 \003(\t\022\037\n\006scales\030\004 \003(\0132\017."
  "bosproto.Scale\022\027\n\017max_stalenesses\030\005 \003(\004\022"
  "(\n\rrefresh_modes\030\006 \003(\0162\021.bosproto.Refres"
  "h\"\205\002\n\rAdmin_Command\0222\n\017command_options\030\001"
  " \001(\0162\031.bosproto.Command_Options\0226\n\020physi"
  "cal_battery\030\002 \001(\0132\032.bosproto.Physical_Ba"
  "tteryH\000\0228\n\021aggregate_battery\030\003 \001(\0132\033.bos"
  "proto.Aggregate_BatteryH\000\0228\n\021partition_b"
  "attery\030\004 \001(\0132\033.bosproto.Partition_Batter"
  "yH\000B\024\n\022command_parameters\"j\n\rAdminRespon"
  "se\022\023\n\013return_code\030\001 \001(\003\022\031\n\017success_messa"
  "ge\030\002 \001(\tH\000\022\031\n\017failure_message\030\003 \001(\tH\000B\016\n"
  "\014return_value*\037\n\007Refresh\022\010\n\004LAZY\020\000\022\n\n\006AC"
  "TIVE\020\001*6\n\006Policy\022\020\n\014PROPORTIONAL\020\000\022\014\n\010TR"
  "ANCHED\020\001\022\014\n\010RESERVED\020\002*`\n\017Command_Option"
  "s\022\023\n\017Create_Physical\020\000\022\024\n\020Create_Aggrega"
  "te\020\001\022\024\n\020Create_Partition\020\002\022\014\n\010Shutdown\020\003"
  "b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_battery_5fmanager_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_battery_5fmanager_2eproto = {
    false, false, 1448, descriptor_table_protodef_battery_5fmanager_2eproto,
    "battery_manager.proto",
    &descriptor_table_battery_5fmanager_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_battery_5fmanager_2eproto::offsets,
    file_level_metadata_battery_5fmanager_2eproto, file_level_enum_descriptors_battery_5fmanager_2eproto,
    file_level_service_descriptors_battery_5fmanager_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_battery_5fmanager_2eproto_getter() {
  return &descriptor_table_battery_5fmanager_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_battery_5fmanager_2eproto(&descriptor_table_battery_5fmanager_2eproto);
namespace bosproto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Refresh_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_battery_5fmanager_2eproto);
  return file_level_enum_descriptors_battery_5fmanager_2eproto[0];
}
bool Refresh_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Policy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_battery_5fmanager_2eproto);
  return file_level_enum_descriptors_battery_5fmanager_2eproto[1];
}
bool Policy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Command_Options_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_battery_5fmanager_2eproto);
  return file_level_enum_descriptors_battery_5fmanager_2eproto[2];
}
bool Command_Options_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Scale::_Internal {
 public:
};

Scale::Scale(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bosproto.Scale)
}
Scale::Scale(const Scale& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Scale* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.charge_proportion_){}
    , decltype(_impl_.capacity_proportion_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.charge_proportion_, &from._impl_.charge_proportion_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.capacity_proportion_) -
    reinterpret_cast<char*>(&_impl_.charge_proportion_)) + sizeof(_impl_.capacity_proportion_));
  // @@protoc_insertion_point(copy_constructor:bosproto.Scale)
}

inline void Scale::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.charge_proportion_){0}
    , decltype(_impl_.capacity_proportion_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Scale::~Scale() {
  // @@protoc_insertion_point(destructor:bosproto.Scale)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Scale::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Scale::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Scale::Clear() {
// @@protoc_insertion_point(message_clear_start:bosproto.Scale)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.charge_proportion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.capacity_proportion_) -
      reinterpret_cast<char*>(&_impl_.charge_proportion_)) + sizeof(_impl_.capacity_proportion_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Scale::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double charge_proportion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.charge_proportion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double capacity_proportion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.capacity_proportion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Scale::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosproto.Scale)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double charge_proportion = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_charge_proportion = this->_internal_charge_proportion();
  uint64_t raw_charge_proportion;
  memcpy(&raw_charge_proportion, &tmp_charge_proportion, sizeof(tmp_charge_proportion));
  if (raw_charge_proportion != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_charge_proportion(), target);
  }

  // double capacity_proportion = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_capacity_proportion = this->_internal_capacity_proportion();
  uint64_t raw_capacity_proportion;
  memcpy(&raw_capacity_proportion, &tmp_capacity_proportion, sizeof(tmp_capacity_proportion));
  if (raw_capacity_proportion != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_capacity_proportion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosproto.Scale)
  return target;
}

size_t Scale::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosproto.Scale)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double charge_proportion = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_charge_proportion = this->_internal_charge_proportion();
  uint64_t raw_charge_proportion;
  memcpy(&raw_charge_proportion, &tmp_charge_proportion, sizeof(tmp_charge_proportion));
  if (raw_charge_proportion != 0) {
    total_size += 1 + 8;
  }

  // double capacity_proportion = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_capacity_proportion = this->_internal_capacity_proportion();
  uint64_t raw_capacity_proportion;
  memcpy(&raw_capacity_proportion, &tmp_capacity_proportion, sizeof(tmp_capacity_proportion));
  if (raw_capacity_proportion != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Scale::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Scale::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Scale::GetClassData() const { return &_class_data_; }


void Scale::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Scale*>(&to_msg);
  auto& from = static_cast<const Scale&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bosproto.Scale)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_charge_proportion = from._internal_charge_proportion();
  uint64_t raw_charge_proportion;
  memcpy(&raw_charge_proportion, &tmp_charge_proportion, sizeof(tmp_charge_proportion));
  if (raw_charge_proportion != 0) {
    _this->_internal_set_charge_proportion(from._internal_charge_proportion());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_capacity_proportion = from._internal_capacity_proportion();
  uint64_t raw_capacity_proportion;
  memcpy(&raw_capacity_proportion, &tmp_capacity_proportion, sizeof(tmp_capacity_proportion));
  if (raw_capacity_proportion != 0) {
    _this->_internal_set_capacity_proportion(from._internal_capacity_proportion());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Scale::CopyFrom(const Scale& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosproto.Scale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scale::IsInitialized() const {
  return true;
}

void Scale::InternalSwap(Scale* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Scale, _impl_.capacity_proportion_)
      + sizeof(Scale::_impl_.capacity_proportion_)
      - PROTOBUF_FIELD_OFFSET(Scale, _impl_.charge_proportion_)>(
          reinterpret_cast<char*>(&_impl_.charge_proportion_),
          reinterpret_cast<char*>(&other->_impl_.charge_proportion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Scale::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battery_5fmanager_2eproto_getter, &descriptor_table_battery_5fmanager_2eproto_once,
      file_level_metadata_battery_5fmanager_2eproto[0]);
}

// ===================================================================

class Physical_Battery::_Internal {
 public:
  using HasBits = decltype(std::declval<Physical_Battery>()._impl_._has_bits_);
  static void set_has_max_staleness(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_refresh_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Physical_Battery::Physical_Battery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bosproto.Physical_Battery)
}
Physical_Battery::Physical_Battery(const Physical_Battery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Physical_Battery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.batteryname_){}
    , decltype(_impl_.max_staleness_){}
    , decltype(_impl_.refresh_mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.batteryname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.batteryname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_batteryname().empty()) {
    _this->_impl_.batteryname_.Set(from._internal_batteryname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.max_staleness_, &from._impl_.max_staleness_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.refresh_mode_) -
    reinterpret_cast<char*>(&_impl_.max_staleness_)) + sizeof(_impl_.refresh_mode_));
  // @@protoc_insertion_point(copy_constructor:bosproto.Physical_Battery)
}

inline void Physical_Battery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.batteryname_){}
    , decltype(_impl_.max_staleness_){uint64_t{0u}}
    , decltype(_impl_.refresh_mode_){0}
  };
  _impl_.batteryname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.batteryname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Physical_Battery::~Physical_Battery() {
  // @@protoc_insertion_point(destructor:bosproto.Physical_Battery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Physical_Battery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.batteryname_.Destroy();
}

void Physical_Battery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Physical_Battery::Clear() {
// @@protoc_insertion_point(message_clear_start:bosproto.Physical_Battery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.batteryname_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.max_staleness_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.refresh_mode_) -
        reinterpret_cast<char*>(&_impl_.max_staleness_)) + sizeof(_impl_.refresh_mode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Physical_Battery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string batteryName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_batteryname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bosproto.Physical_Battery.batteryName"));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 max_staleness = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_max_staleness(&has_bits);
          _impl_.max_staleness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .bosproto.Refresh refresh_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_refresh_mode(static_cast<::bosproto::Refresh>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Physical_Battery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosproto.Physical_Battery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string batteryName = 1;
  if (!this->_internal_batteryname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_batteryname().data(), static_cast<int>(this->_internal_batteryname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosproto.Physical_Battery.batteryName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_batteryname(), target);
  }

  // optional uint64 max_staleness = 2;
  if (_internal_has_max_staleness()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_max_staleness(), target);
  }

  // optional .bosproto.Refresh refresh_mode = 3;
  if (_internal_has_refresh_mode()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_refresh_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosproto.Physical_Battery)
  return target;
}

size_t Physical_Battery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosproto.Physical_Battery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string batteryName = 1;
  if (!this->_internal_batteryname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_batteryname());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 max_staleness = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_max_staleness());
    }

    // optional .bosproto.Refresh refresh_mode = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_refresh_mode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Physical_Battery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Physical_Battery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Physical_Battery::GetClassData() const { return &_class_data_; }


void Physical_Battery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Physical_Battery*>(&to_msg);
  auto& from = static_cast<const Physical_Battery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bosproto.Physical_Battery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_batteryname().empty()) {
    _this->_internal_set_batteryname(from._internal_batteryname());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.max_staleness_ = from._impl_.max_staleness_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.refresh_mode_ = from._impl_.refresh_mode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Physical_Battery::CopyFrom(const Physical_Battery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosproto.Physical_Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Physical_Battery::IsInitialized() const {
  return true;
}

void Physical_Battery::InternalSwap(Physical_Battery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.batteryname_, lhs_arena,
      &other->_impl_.batteryname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Physical_Battery, _impl_.refresh_mode_)
      + sizeof(Physical_Battery::_impl_.refresh_mode_)
      - PROTOBUF_FIELD_OFFSET(Physical_Battery, _impl_.max_staleness_)>(
          reinterpret_cast<char*>(&_impl_.max_staleness_),
          reinterpret_cast<char*>(&other->_impl_.max_staleness_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Physical_Battery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battery_5fmanager_2eproto_getter, &descriptor_table_battery_5fmanager_2eproto_once,
      file_level_metadata_battery_5fmanager_2eproto[1]);
}

// ===================================================================

class Dynamic_Battery::_Internal {
 public:
  using HasBits = decltype(std::declval<Dynamic_Battery>()._impl_._has_bits_);
  static void set_has_max_staleness(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_refresh_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Dynamic_Battery::Dynamic_Battery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bosproto.Dynamic_Battery)
}
Dynamic_Battery::Dynamic_Battery(const Dynamic_Battery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Dynamic_Battery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.arguments_){from._impl_.arguments_}
    , decltype(_impl_.batteryname_){}
    , decltype(_impl_.refresh_func_){}
    , decltype(_impl_.destructor_func_){}
    , decltype(_impl_.constructor_func_){}
    , decltype(_impl_.set_current_func_){}
    , decltype(_impl_.max_staleness_){}
    , decltype(_impl_.refresh_mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.batteryname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.batteryname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_batteryname().empty()) {
    _this->_impl_.batteryname_.Set(from._internal_batteryname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.refresh_func_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.refresh_func_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_refresh_func().empty()) {
    _this->_impl_.refresh_func_.Set(from._internal_refresh_func(), 
      _this->GetArenaForAllocation());
  }
  _impl_.destructor_func_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destructor_func_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destructor_func().empty()) {
    _this->_impl_.destructor_func_.Set(from._internal_destructor_func(), 
      _this->GetArenaForAllocation());
  }
  _impl_.constructor_func_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.constructor_func_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_constructor_func().empty()) {
    _this->_impl_.constructor_func_.Set(from._internal_constructor_func(), 
      _this->GetArenaForAllocation());
  }
  _impl_.set_current_func_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.set_current_func_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_set_current_func().empty()) {
    _this->_impl_.set_current_func_.Set(from._internal_set_current_func(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.max_staleness_, &from._impl_.max_staleness_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.refresh_mode_) -
    reinterpret_cast<char*>(&_impl_.max_staleness_)) + sizeof(_impl_.refresh_mode_));
  // @@protoc_insertion_point(copy_constructor:bosproto.Dynamic_Battery)
}

inline void Dynamic_Battery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.arguments_){arena}
    , decltype(_impl_.batteryname_){}
    , decltype(_impl_.refresh_func_){}
    , decltype(_impl_.destructor_func_){}
    , decltype(_impl_.constructor_func_){}
    , decltype(_impl_.set_current_func_){}
    , decltype(_impl_.max_staleness_){uint64_t{0u}}
    , decltype(_impl_.refresh_mode_){0}
  };
  _impl_.batteryname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.batteryname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.refresh_func_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.refresh_func_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.destructor_func_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destructor_func_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.constructor_func_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.constructor_func_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.set_current_func_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.set_current_func_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Dynamic_Battery::~Dynamic_Battery() {
  // @@protoc_insertion_point(destructor:bosproto.Dynamic_Battery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Dynamic_Battery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.arguments_.~RepeatedPtrField();
  _impl_.batteryname_.Destroy();
  _impl_.refresh_func_.Destroy();
  _impl_.destructor_func_.Destroy();
  _impl_.constructor_func_.Destroy();
  _impl_.set_current_func_.Destroy();
}

void Dynamic_Battery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Dynamic_Battery::Clear() {
// @@protoc_insertion_point(message_clear_start:bosproto.Dynamic_Battery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.arguments_.Clear();
  _impl_.batteryname_.ClearToEmpty();
  _impl_.refresh_func_.ClearToEmpty();
  _impl_.destructor_func_.ClearToEmpty();
  _impl_.constructor_func_.ClearToEmpty();
  _impl_.set_current_func_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.max_staleness_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.refresh_mode_) -
        reinterpret_cast<char*>(&_impl_.max_staleness_)) + sizeof(_impl_.refresh_mode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dynamic_Battery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string batteryName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_batteryname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bosproto.Dynamic_Battery.batteryName"));
        } else
          goto handle_unusual;
        continue;
      // string refresh_func = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_refresh_func();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bosproto.Dynamic_Battery.refresh_func"));
        } else
          goto handle_unusual;
        continue;
      // string destructor_func = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_destructor_func();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bosproto.Dynamic_Battery.destructor_func"));
        } else
          goto handle_unusual;
        continue;
      // string constructor_func = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_constructor_func();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bosproto.Dynamic_Battery.constructor_func"));
        } else
          goto handle_unusual;
        continue;
      // string set_current_func = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_set_current_func();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bosproto.Dynamic_Battery.set_current_func"));
        } else
          goto handle_unusual;
        continue;
      // repeated string arguments = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_arguments();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "bosproto.Dynamic_Battery.arguments"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 max_staleness = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_max_staleness(&has_bits);
          _impl_.max_staleness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .bosproto.Refresh refresh_mode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_refresh_mode(static_cast<::bosproto::Refresh>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Dynamic_Battery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosproto.Dynamic_Battery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string batteryName = 1;
  if (!this->_internal_batteryname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_batteryname().data(), static_cast<int>(this->_internal_batteryname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosproto.Dynamic_Battery.batteryName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_batteryname(), target);
  }

  // string refresh_func = 2;
  if (!this->_internal_refresh_func().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_refresh_func().data(), static_cast<int>(this->_internal_refresh_func().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosproto.Dynamic_Battery.refresh_func");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_refresh_func(), target);
  }

  // string destructor_func = 3;
  if (!this->_internal_destructor_func().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destructor_func().data(), static_cast<int>(this->_internal_destructor_func().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosproto.Dynamic_Battery.destructor_func");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_destructor_func(), target);
  }

  // string constructor_func = 4;
  if (!this->_internal_constructor_func().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_constructor_func().data(), static_cast<int>(this->_internal_constructor_func().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosproto.Dynamic_Battery.constructor_func");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_constructor_func(), target);
  }

  // string set_current_func = 5;
  if (!this->_internal_set_current_func().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_set_current_func().data(), static_cast<int>(this->_internal_set_current_func().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosproto.Dynamic_Battery.set_current_func");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_set_current_func(), target);
  }

  // repeated string arguments = 6;
  for (int i = 0, n = this->_internal_arguments_size(); i < n; i++) {
    const auto& s = this->_internal_arguments(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosproto.Dynamic_Battery.arguments");
    target = stream->WriteString(6, s, target);
  }

  // optional uint64 max_staleness = 7;
  if (_internal_has_max_staleness()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_max_staleness(), target);
  }

  // optional .bosproto.Refresh refresh_mode = 8;
  if (_internal_has_refresh_mode()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_refresh_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosproto.Dynamic_Battery)
  return target;
}

size_t Dynamic_Battery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosproto.Dynamic_Battery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string arguments = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.arguments_.size());
  for (int i = 0, n = _impl_.arguments_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.arguments_.Get(i));
  }

  // string batteryName = 1;
  if (!this->_internal_batteryname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_batteryname());
  }

  // string refresh_func = 2;
  if (!this->_internal_refresh_func().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_refresh_func());
  }

  // string destructor_func = 3;
  if (!this->_internal_destructor_func().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destructor_func());
  }

  // string constructor_func = 4;
  if (!this->_internal_constructor_func().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_constructor_func());
  }

  // string set_current_func = 5;
  if (!this->_internal_set_current_func().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_set_current_func());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 max_staleness = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_max_staleness());
    }

    // optional .bosproto.Refresh refresh_mode = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_refresh_mode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dynamic_Battery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Dynamic_Battery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dynamic_Battery::GetClassData() const { return &_class_data_; }


void Dynamic_Battery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Dynamic_Battery*>(&to_msg);
  auto& from = static_cast<const Dynamic_Battery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bosproto.Dynamic_Battery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.arguments_.MergeFrom(from._impl_.arguments_);
  if (!from._internal_batteryname().empty()) {
    _this->_internal_set_batteryname(from._internal_batteryname());
  }
  if (!from._internal_refresh_func().empty()) {
    _this->_internal_set_refresh_func(from._internal_refresh_func());
  }
  if (!from._internal_destructor_func().empty()) {
    _this->_internal_set_destructor_func(from._internal_destructor_func());
  }
  if (!from._internal_constructor_func().empty()) {
    _this->_internal_set_constructor_func(from._internal_constructor_func());
  }
  if (!from._internal_set_current_func().empty()) {
    _this->_internal_set_set_current_func(from._internal_set_current_func());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.max_staleness_ = from._impl_.max_staleness_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.refresh_mode_ = from._impl_.refresh_mode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dynamic_Battery::CopyFrom(const Dynamic_Battery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosproto.Dynamic_Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dynamic_Battery::IsInitialized() const {
  return true;
}

void Dynamic_Battery::InternalSwap(Dynamic_Battery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.arguments_.InternalSwap(&other->_impl_.arguments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.batteryname_, lhs_arena,
      &other->_impl_.batteryname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.refresh_func_, lhs_arena,
      &other->_impl_.refresh_func_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.destructor_func_, lhs_arena,
      &other->_impl_.destructor_func_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.constructor_func_, lhs_arena,
      &other->_impl_.constructor_func_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.set_current_func_, lhs_arena,
      &other->_impl_.set_current_func_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dynamic_Battery, _impl_.refresh_mode_)
      + sizeof(Dynamic_Battery::_impl_.refresh_mode_)
      - PROTOBUF_FIELD_OFFSET(Dynamic_Battery, _impl_.max_staleness_)>(
          reinterpret_cast<char*>(&_impl_.max_staleness_),
          reinterpret_cast<char*>(&other->_impl_.max_staleness_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Dynamic_Battery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battery_5fmanager_2eproto_getter, &descriptor_table_battery_5fmanager_2eproto_once,
      file_level_metadata_battery_5fmanager_2eproto[2]);
}

// ===================================================================

class Aggregate_Battery::_Internal {
 public:
  using HasBits = decltype(std::declval<Aggregate_Battery>()._impl_._has_bits_);
  static void set_has_max_staleness(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_refresh_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Aggregate_Battery::Aggregate_Battery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bosproto.Aggregate_Battery)
}
Aggregate_Battery::Aggregate_Battery(const Aggregate_Battery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Aggregate_Battery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parentnames_){from._impl_.parentnames_}
    , decltype(_impl_.batteryname_){}
    , decltype(_impl_.max_staleness_){}
    , decltype(_impl_.refresh_mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.batteryname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.batteryname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_batteryname().empty()) {
    _this->_impl_.batteryname_.Set(from._internal_batteryname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.max_staleness_, &from._impl_.max_staleness_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.refresh_mode_) -
    reinterpret_cast<char*>(&_impl_.max_staleness_)) + sizeof(_impl_.refresh_mode_));
  // @@protoc_insertion_point(copy_constructor:bosproto.Aggregate_Battery)
}

inline void Aggregate_Battery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parentnames_){arena}
    , decltype(_impl_.batteryname_){}
    , decltype(_impl_.max_staleness_){uint64_t{0u}}
    , decltype(_impl_.refresh_mode_){0}
  };
  _impl_.batteryname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.batteryname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Aggregate_Battery::~Aggregate_Battery() {
  // @@protoc_insertion_point(destructor:bosproto.Aggregate_Battery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Aggregate_Battery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parentnames_.~RepeatedPtrField();
  _impl_.batteryname_.Destroy();
}

void Aggregate_Battery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Aggregate_Battery::Clear() {
// @@protoc_insertion_point(message_clear_start:bosproto.Aggregate_Battery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parentnames_.Clear();
  _impl_.batteryname_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.max_staleness_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.refresh_mode_) -
        reinterpret_cast<char*>(&_impl_.max_staleness_)) + sizeof(_impl_.refresh_mode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Aggregate_Battery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string batteryName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_batteryname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bosproto.Aggregate_Battery.batteryName"));
        } else
          goto handle_unusual;
        continue;
      // repeated string parentNames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_parentnames();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "bosproto.Aggregate_Battery.parentNames"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 max_staleness = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_max_staleness(&has_bits);
          _impl_.max_staleness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .bosproto.Refresh refresh_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_refresh_mode(static_cast<::bosproto::Refresh>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Aggregate_Battery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosproto.Aggregate_Battery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string batteryName = 1;
  if (!this->_internal_batteryname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_batteryname().data(), static_cast<int>(this->_internal_batteryname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosproto.Aggregate_Battery.batteryName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_batteryname(), target);
  }

  // repeated string parentNames = 2;
  for (int i = 0, n = this->_internal_parentnames_size(); i < n; i++) {
    const auto& s = this->_internal_parentnames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosproto.Aggregate_Battery.parentNames");
    target = stream->WriteString(2, s, target);
  }

  // optional uint64 max_staleness = 3;
  if (_internal_has_max_staleness()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_max_staleness(), target);
  }

  // optional .bosproto.Refresh refresh_mode = 4;
  if (_internal_has_refresh_mode()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_refresh_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosproto.Aggregate_Battery)
  return target;
}

size_t Aggregate_Battery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosproto.Aggregate_Battery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string parentNames = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.parentnames_.size());
  for (int i = 0, n = _impl_.parentnames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.parentnames_.Get(i));
  }

  // string batteryName = 1;
  if (!this->_internal_batteryname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_batteryname());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 max_staleness = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_max_staleness());
    }

    // optional .bosproto.Refresh refresh_mode = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_refresh_mode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Aggregate_Battery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Aggregate_Battery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Aggregate_Battery::GetClassData() const { return &_class_data_; }


void Aggregate_Battery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Aggregate_Battery*>(&to_msg);
  auto& from = static_cast<const Aggregate_Battery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bosproto.Aggregate_Battery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.parentnames_.MergeFrom(from._impl_.parentnames_);
  if (!from._internal_batteryname().empty()) {
    _this->_internal_set_batteryname(from._internal_batteryname());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.max_staleness_ = from._impl_.max_staleness_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.refresh_mode_ = from._impl_.refresh_mode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Aggregate_Battery::CopyFrom(const Aggregate_Battery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosproto.Aggregate_Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aggregate_Battery::IsInitialized() const {
  return true;
}

void Aggregate_Battery::InternalSwap(Aggregate_Battery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.parentnames_.InternalSwap(&other->_impl_.parentnames_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.batteryname_, lhs_arena,
      &other->_impl_.batteryname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Aggregate_Battery, _impl_.refresh_mode_)
      + sizeof(Aggregate_Battery::_impl_.refresh_mode_)
      - PROTOBUF_FIELD_OFFSET(Aggregate_Battery, _impl_.max_staleness_)>(
          reinterpret_cast<char*>(&_impl_.max_staleness_),
          reinterpret_cast<char*>(&other->_impl_.max_staleness_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Aggregate_Battery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battery_5fmanager_2eproto_getter, &descriptor_table_battery_5fmanager_2eproto_once,
      file_level_metadata_battery_5fmanager_2eproto[3]);
}

// ===================================================================

class Partition_Battery::_Internal {
 public:
};

Partition_Battery::Partition_Battery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bosproto.Partition_Battery)
}
Partition_Battery::Partition_Battery(const Partition_Battery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Partition_Battery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.names_){from._impl_.names_}
    , decltype(_impl_.scales_){from._impl_.scales_}
    , decltype(_impl_.max_stalenesses_){from._impl_.max_stalenesses_}
    , /*decltype(_impl_._max_stalenesses_cached_byte_size_)*/{0}
    , decltype(_impl_.refresh_modes_){from._impl_.refresh_modes_}
    , /*decltype(_impl_._refresh_modes_cached_byte_size_)*/{0}
    , decltype(_impl_.sourcename_){}
    , decltype(_impl_.policy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sourcename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourcename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sourcename().empty()) {
    _this->_impl_.sourcename_.Set(from._internal_sourcename(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.policy_ = from._impl_.policy_;
  // @@protoc_insertion_point(copy_constructor:bosproto.Partition_Battery)
}

inline void Partition_Battery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.names_){arena}
    , decltype(_impl_.scales_){arena}
    , decltype(_impl_.max_stalenesses_){arena}
    , /*decltype(_impl_._max_stalenesses_cached_byte_size_)*/{0}
    , decltype(_impl_.refresh_modes_){arena}
    , /*decltype(_impl_._refresh_modes_cached_byte_size_)*/{0}
    , decltype(_impl_.sourcename_){}
    , decltype(_impl_.policy_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sourcename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourcename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Partition_Battery::~Partition_Battery() {
  // @@protoc_insertion_point(destructor:bosproto.Partition_Battery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Partition_Battery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.names_.~RepeatedPtrField();
  _impl_.scales_.~RepeatedPtrField();
  _impl_.max_stalenesses_.~RepeatedField();
  _impl_.refresh_modes_.~RepeatedField();
  _impl_.sourcename_.Destroy();
}

void Partition_Battery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Partition_Battery::Clear() {
// @@protoc_insertion_point(message_clear_start:bosproto.Partition_Battery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.names_.Clear();
  _impl_.scales_.Clear();
  _impl_.max_stalenesses_.Clear();
  _impl_.refresh_modes_.Clear();
  _impl_.sourcename_.ClearToEmpty();
  _impl_.policy_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Partition_Battery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sourceName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sourcename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bosproto.Partition_Battery.sourceName"));
        } else
          goto handle_unusual;
        continue;
      // .bosproto.Policy policy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_policy(static_cast<::bosproto::Policy>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "bosproto.Partition_Battery.names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .bosproto.Scale scales = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scales(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 max_stalenesses = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_max_stalenesses(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_max_stalenesses(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .bosproto.Refresh refresh_modes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_refresh_modes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_refresh_modes(static_cast<::bosproto::Refresh>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Partition_Battery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosproto.Partition_Battery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sourceName = 1;
  if (!this->_internal_sourcename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sourcename().data(), static_cast<int>(this->_internal_sourcename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosproto.Partition_Battery.sourceName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sourcename(), target);
  }

  // .bosproto.Policy policy = 2;
  if (this->_internal_policy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_policy(), target);
  }

  // repeated string names = 3;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosproto.Partition_Battery.names");
    target = stream->WriteString(3, s, target);
  }

  // repeated .bosproto.Scale scales = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_scales_size()); i < n; i++) {
    const auto& repfield = this->_internal_scales(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint64 max_stalenesses = 5;
  {
    int byte_size = _impl_._max_stalenesses_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          5, _internal_max_stalenesses(), byte_size, target);
    }
  }

  // repeated .bosproto.Refresh refresh_modes = 6;
  {
    int byte_size = _impl_._refresh_modes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          6, _impl_.refresh_modes_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosproto.Partition_Battery)
  return target;
}

size_t Partition_Battery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosproto.Partition_Battery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.names_.size());
  for (int i = 0, n = _impl_.names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.names_.Get(i));
  }

  // repeated .bosproto.Scale scales = 4;
  total_size += 1UL * this->_internal_scales_size();
  for (const auto& msg : this->_impl_.scales_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 max_stalenesses = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.max_stalenesses_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._max_stalenesses_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .bosproto.Refresh refresh_modes = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_refresh_modes_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_refresh_modes(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._refresh_modes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string sourceName = 1;
  if (!this->_internal_sourcename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourcename());
  }

  // .bosproto.Policy policy = 2;
  if (this->_internal_policy() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_policy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Partition_Battery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Partition_Battery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Partition_Battery::GetClassData() const { return &_class_data_; }


void Partition_Battery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Partition_Battery*>(&to_msg);
  auto& from = static_cast<const Partition_Battery&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bosproto.Partition_Battery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.names_.MergeFrom(from._impl_.names_);
  _this->_impl_.scales_.MergeFrom(from._impl_.scales_);
  _this->_impl_.max_stalenesses_.MergeFrom(from._impl_.max_stalenesses_);
  _this->_impl_.refresh_modes_.MergeFrom(from._impl_.refresh_modes_);
  if (!from._internal_sourcename().empty()) {
    _this->_internal_set_sourcename(from._internal_sourcename());
  }
  if (from._internal_policy() != 0) {
    _this->_internal_set_policy(from._internal_policy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Partition_Battery::CopyFrom(const Partition_Battery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosproto.Partition_Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Partition_Battery::IsInitialized() const {
  return true;
}

void Partition_Battery::InternalSwap(Partition_Battery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.names_.InternalSwap(&other->_impl_.names_);
  _impl_.scales_.InternalSwap(&other->_impl_.scales_);
  _impl_.max_stalenesses_.InternalSwap(&other->_impl_.max_stalenesses_);
  _impl_.refresh_modes_.InternalSwap(&other->_impl_.refresh_modes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sourcename_, lhs_arena,
      &other->_impl_.sourcename_, rhs_arena
  );
  swap(_impl_.policy_, other->_impl_.policy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Partition_Battery::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battery_5fmanager_2eproto_getter, &descriptor_table_battery_5fmanager_2eproto_once,
      file_level_metadata_battery_5fmanager_2eproto[4]);
}

// ===================================================================

class Admin_Command::_Internal {
 public:
  static const ::bosproto::Physical_Battery& physical_battery(const Admin_Command* msg);
  static const ::bosproto::Aggregate_Battery& aggregate_battery(const Admin_Command* msg);
  static const ::bosproto::Partition_Battery& partition_battery(const Admin_Command* msg);
};

const ::bosproto::Physical_Battery&
Admin_Command::_Internal::physical_battery(const Admin_Command* msg) {
  return *msg->_impl_.command_parameters_.physical_battery_;
}
const ::bosproto::Aggregate_Battery&
Admin_Command::_Internal::aggregate_battery(const Admin_Command* msg) {
  return *msg->_impl_.command_parameters_.aggregate_battery_;
}
const ::bosproto::Partition_Battery&
Admin_Command::_Internal::partition_battery(const Admin_Command* msg) {
  return *msg->_impl_.command_parameters_.partition_battery_;
}
void Admin_Command::set_allocated_physical_battery(::bosproto::Physical_Battery* physical_battery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command_parameters();
  if (physical_battery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(physical_battery);
    if (message_arena != submessage_arena) {
      physical_battery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, physical_battery, submessage_arena);
    }
    set_has_physical_battery();
    _impl_.command_parameters_.physical_battery_ = physical_battery;
  }
  // @@protoc_insertion_point(field_set_allocated:bosproto.Admin_Command.physical_battery)
}
void Admin_Command::set_allocated_aggregate_battery(::bosproto::Aggregate_Battery* aggregate_battery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command_parameters();
  if (aggregate_battery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(aggregate_battery);
    if (message_arena != submessage_arena) {
      aggregate_battery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aggregate_battery, submessage_arena);
    }
    set_has_aggregate_battery();
    _impl_.command_parameters_.aggregate_battery_ = aggregate_battery;
  }
  // @@protoc_insertion_point(field_set_allocated:bosproto.Admin_Command.aggregate_battery)
}
void Admin_Command::set_allocated_partition_battery(::bosproto::Partition_Battery* partition_battery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_command_parameters();
  if (partition_battery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(partition_battery);
    if (message_arena != submessage_arena) {
      partition_battery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partition_battery, submessage_arena);
    }
    set_has_partition_battery();
    _impl_.command_parameters_.partition_battery_ = partition_battery;
  }
  // @@protoc_insertion_point(field_set_allocated:bosproto.Admin_Command.partition_battery)
}
Admin_Command::Admin_Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bosproto.Admin_Command)
}
Admin_Command::Admin_Command(const Admin_Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Admin_Command* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.command_options_){}
    , decltype(_impl_.command_parameters_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.command_options_ = from._impl_.command_options_;
  clear_has_command_parameters();
  switch (from.command_parameters_case()) {
    case kPhysicalBattery: {
      _this->_internal_mutable_physical_battery()->::bosproto::Physical_Battery::MergeFrom(
          from._internal_physical_battery());
      break;
    }
    case kAggregateBattery: {
      _this->_internal_mutable_aggregate_battery()->::bosproto::Aggregate_Battery::MergeFrom(
          from._internal_aggregate_battery());
      break;
    }
    case kPartitionBattery: {
      _this->_internal_mutable_partition_battery()->::bosproto::Partition_Battery::MergeFrom(
          from._internal_partition_battery());
      break;
    }
    case COMMAND_PARAMETERS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bosproto.Admin_Command)
}

inline void Admin_Command::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.command_options_){0}
    , decltype(_impl_.command_parameters_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_command_parameters();
}

Admin_Command::~Admin_Command() {
  // @@protoc_insertion_point(destructor:bosproto.Admin_Command)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Admin_Command::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_command_parameters()) {
    clear_command_parameters();
  }
}

void Admin_Command::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Admin_Command::clear_command_parameters() {
// @@protoc_insertion_point(one_of_clear_start:bosproto.Admin_Command)
  switch (command_parameters_case()) {
    case kPhysicalBattery: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.command_parameters_.physical_battery_;
      }
      break;
    }
    case kAggregateBattery: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.command_parameters_.aggregate_battery_;
      }
      break;
    }
    case kPartitionBattery: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.command_parameters_.partition_battery_;
      }
      break;
    }
    case COMMAND_PARAMETERS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = COMMAND_PARAMETERS_NOT_SET;
}


void Admin_Command::Clear() {
// @@protoc_insertion_point(message_clear_start:bosproto.Admin_Command)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.command_options_ = 0;
  clear_command_parameters();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Admin_Command::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bosproto.Command_Options command_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_command_options(static_cast<::bosproto::Command_Options>(val));
        } else
          goto handle_unusual;
        continue;
      // .bosproto.Physical_Battery physical_battery = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_physical_battery(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bosproto.Aggregate_Battery aggregate_battery = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_aggregate_battery(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bosproto.Partition_Battery partition_battery = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_partition_battery(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Admin_Command::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosproto.Admin_Command)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosproto.Command_Options command_options = 1;
  if (this->_internal_command_options() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_command_options(), target);
  }

  // .bosproto.Physical_Battery physical_battery = 2;
  if (_internal_has_physical_battery()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::physical_battery(this),
        _Internal::physical_battery(this).GetCachedSize(), target, stream);
  }

  // .bosproto.Aggregate_Battery aggregate_battery = 3;
  if (_internal_has_aggregate_battery()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::aggregate_battery(this),
        _Internal::aggregate_battery(this).GetCachedSize(), target, stream);
  }

  // .bosproto.Partition_Battery partition_battery = 4;
  if (_internal_has_partition_battery()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::partition_battery(this),
        _Internal::partition_battery(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosproto.Admin_Command)
  return target;
}

size_t Admin_Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosproto.Admin_Command)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosproto.Command_Options command_options = 1;
  if (this->_internal_command_options() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_command_options());
  }

  switch (command_parameters_case()) {
    // .bosproto.Physical_Battery physical_battery = 2;
    case kPhysicalBattery: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.command_parameters_.physical_battery_);
      break;
    }
    // .bosproto.Aggregate_Battery aggregate_battery = 3;
    case kAggregateBattery: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.command_parameters_.aggregate_battery_);
      break;
    }
    // .bosproto.Partition_Battery partition_battery = 4;
    case kPartitionBattery: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.command_parameters_.partition_battery_);
      break;
    }
    case COMMAND_PARAMETERS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Admin_Command::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Admin_Command::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Admin_Command::GetClassData() const { return &_class_data_; }


void Admin_Command::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Admin_Command*>(&to_msg);
  auto& from = static_cast<const Admin_Command&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bosproto.Admin_Command)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_command_options() != 0) {
    _this->_internal_set_command_options(from._internal_command_options());
  }
  switch (from.command_parameters_case()) {
    case kPhysicalBattery: {
      _this->_internal_mutable_physical_battery()->::bosproto::Physical_Battery::MergeFrom(
          from._internal_physical_battery());
      break;
    }
    case kAggregateBattery: {
      _this->_internal_mutable_aggregate_battery()->::bosproto::Aggregate_Battery::MergeFrom(
          from._internal_aggregate_battery());
      break;
    }
    case kPartitionBattery: {
      _this->_internal_mutable_partition_battery()->::bosproto::Partition_Battery::MergeFrom(
          from._internal_partition_battery());
      break;
    }
    case COMMAND_PARAMETERS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Admin_Command::CopyFrom(const Admin_Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosproto.Admin_Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_Command::IsInitialized() const {
  return true;
}

void Admin_Command::InternalSwap(Admin_Command* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.command_options_, other->_impl_.command_options_);
  swap(_impl_.command_parameters_, other->_impl_.command_parameters_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Admin_Command::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battery_5fmanager_2eproto_getter, &descriptor_table_battery_5fmanager_2eproto_once,
      file_level_metadata_battery_5fmanager_2eproto[5]);
}

// ===================================================================

class AdminResponse::_Internal {
 public:
};

AdminResponse::AdminResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bosproto.AdminResponse)
}
AdminResponse::AdminResponse(const AdminResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AdminResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.return_code_){}
    , decltype(_impl_.return_value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.return_code_ = from._impl_.return_code_;
  clear_has_return_value();
  switch (from.return_value_case()) {
    case kSuccessMessage: {
      _this->_internal_set_success_message(from._internal_success_message());
      break;
    }
    case kFailureMessage: {
      _this->_internal_set_failure_message(from._internal_failure_message());
      break;
    }
    case RETURN_VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bosproto.AdminResponse)
}

inline void AdminResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.return_code_){int64_t{0}}
    , decltype(_impl_.return_value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_return_value();
}

AdminResponse::~AdminResponse() {
  // @@protoc_insertion_point(destructor:bosproto.AdminResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdminResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_return_value()) {
    clear_return_value();
  }
}

void AdminResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdminResponse::clear_return_value() {
// @@protoc_insertion_point(one_of_clear_start:bosproto.AdminResponse)
  switch (return_value_case()) {
    case kSuccessMessage: {
      _impl_.return_value_.success_message_.Destroy();
      break;
    }
    case kFailureMessage: {
      _impl_.return_value_.failure_message_.Destroy();
      break;
    }
    case RETURN_VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RETURN_VALUE_NOT_SET;
}


void AdminResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosproto.AdminResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.return_code_ = int64_t{0};
  clear_return_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdminResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 return_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.return_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string success_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_success_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bosproto.AdminResponse.success_message"));
        } else
          goto handle_unusual;
        continue;
      // string failure_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_failure_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bosproto.AdminResponse.failure_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdminResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosproto.AdminResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 return_code = 1;
  if (this->_internal_return_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_return_code(), target);
  }

  // string success_message = 2;
  if (_internal_has_success_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_success_message().data(), static_cast<int>(this->_internal_success_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosproto.AdminResponse.success_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_success_message(), target);
  }

  // string failure_message = 3;
  if (_internal_has_failure_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_failure_message().data(), static_cast<int>(this->_internal_failure_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosproto.AdminResponse.failure_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_failure_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosproto.AdminResponse)
  return target;
}

size_t AdminResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosproto.AdminResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 return_code = 1;
  if (this->_internal_return_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_return_code());
  }

  switch (return_value_case()) {
    // string success_message = 2;
    case kSuccessMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_success_message());
      break;
    }
    // string failure_message = 3;
    case kFailureMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_failure_message());
      break;
    }
    case RETURN_VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdminResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AdminResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdminResponse::GetClassData() const { return &_class_data_; }


void AdminResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AdminResponse*>(&to_msg);
  auto& from = static_cast<const AdminResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bosproto.AdminResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_return_code() != 0) {
    _this->_internal_set_return_code(from._internal_return_code());
  }
  switch (from.return_value_case()) {
    case kSuccessMessage: {
      _this->_internal_set_success_message(from._internal_success_message());
      break;
    }
    case kFailureMessage: {
      _this->_internal_set_failure_message(from._internal_failure_message());
      break;
    }
    case RETURN_VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdminResponse::CopyFrom(const AdminResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosproto.AdminResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminResponse::IsInitialized() const {
  return true;
}

void AdminResponse::InternalSwap(AdminResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.return_code_, other->_impl_.return_code_);
  swap(_impl_.return_value_, other->_impl_.return_value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdminResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battery_5fmanager_2eproto_getter, &descriptor_table_battery_5fmanager_2eproto_once,
      file_level_metadata_battery_5fmanager_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace bosproto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosproto::Scale*
Arena::CreateMaybeMessage< ::bosproto::Scale >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosproto::Scale >(arena);
}
template<> PROTOBUF_NOINLINE ::bosproto::Physical_Battery*
Arena::CreateMaybeMessage< ::bosproto::Physical_Battery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosproto::Physical_Battery >(arena);
}
template<> PROTOBUF_NOINLINE ::bosproto::Dynamic_Battery*
Arena::CreateMaybeMessage< ::bosproto::Dynamic_Battery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosproto::Dynamic_Battery >(arena);
}
template<> PROTOBUF_NOINLINE ::bosproto::Aggregate_Battery*
Arena::CreateMaybeMessage< ::bosproto::Aggregate_Battery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosproto::Aggregate_Battery >(arena);
}
template<> PROTOBUF_NOINLINE ::bosproto::Partition_Battery*
Arena::CreateMaybeMessage< ::bosproto::Partition_Battery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosproto::Partition_Battery >(arena);
}
template<> PROTOBUF_NOINLINE ::bosproto::Admin_Command*
Arena::CreateMaybeMessage< ::bosproto::Admin_Command >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosproto::Admin_Command >(arena);
}
template<> PROTOBUF_NOINLINE ::bosproto::AdminResponse*
Arena::CreateMaybeMessage< ::bosproto::AdminResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosproto::AdminResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
