// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battery.proto

#include "battery.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace bosproto {
PROTOBUF_CONSTEXPR BatteryStatus::BatteryStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.voltage_mv_)*/0
  , /*decltype(_impl_.current_ma_)*/0
  , /*decltype(_impl_.capacity_mah_)*/0
  , /*decltype(_impl_.max_capacity_mah_)*/0
  , /*decltype(_impl_.max_charging_current_ma_)*/0
  , /*decltype(_impl_.max_discharging_current_ma_)*/0
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BatteryStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatteryStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatteryStatusDefaultTypeInternal() {}
  union {
    BatteryStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatteryStatusDefaultTypeInternal _BatteryStatus_default_instance_;
PROTOBUF_CONSTEXPR ScheduleSetCurrent::ScheduleSetCurrent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.current_ma_)*/0
  , /*decltype(_impl_.starttime_)*/uint64_t{0u}
  , /*decltype(_impl_.endtime_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScheduleSetCurrentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScheduleSetCurrentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScheduleSetCurrentDefaultTypeInternal() {}
  union {
    ScheduleSetCurrent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScheduleSetCurrentDefaultTypeInternal _ScheduleSetCurrent_default_instance_;
PROTOBUF_CONSTEXPR BatteryCommand::BatteryCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.command_)*/0
  , /*decltype(_impl_.schedule_parameters_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct BatteryCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatteryCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatteryCommandDefaultTypeInternal() {}
  union {
    BatteryCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatteryCommandDefaultTypeInternal _BatteryCommand_default_instance_;
PROTOBUF_CONSTEXPR BatteryStatusResponse::BatteryStatusResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.return_code_)*/int64_t{0}
  , /*decltype(_impl_.return_value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct BatteryStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BatteryStatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BatteryStatusResponseDefaultTypeInternal() {}
  union {
    BatteryStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BatteryStatusResponseDefaultTypeInternal _BatteryStatusResponse_default_instance_;
PROTOBUF_CONSTEXPR ScheduleSetCurrentResponse::ScheduleSetCurrentResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.return_code_)*/int64_t{0}
  , /*decltype(_impl_.return_value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ScheduleSetCurrentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScheduleSetCurrentResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScheduleSetCurrentResponseDefaultTypeInternal() {}
  union {
    ScheduleSetCurrentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScheduleSetCurrentResponseDefaultTypeInternal _ScheduleSetCurrentResponse_default_instance_;
PROTOBUF_CONSTEXPR RemoveBatteryResponse::RemoveBatteryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.return_code_)*/int64_t{0}
  , /*decltype(_impl_.return_value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RemoveBatteryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveBatteryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveBatteryResponseDefaultTypeInternal() {}
  union {
    RemoveBatteryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveBatteryResponseDefaultTypeInternal _RemoveBatteryResponse_default_instance_;
PROTOBUF_CONSTEXPR SetStatusResponse::SetStatusResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.return_code_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetStatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetStatusResponseDefaultTypeInternal() {}
  union {
    SetStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetStatusResponseDefaultTypeInternal _SetStatusResponse_default_instance_;
}  // namespace bosproto
static ::_pb::Metadata file_level_metadata_battery_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_battery_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_battery_2eproto = nullptr;

const uint32_t TableStruct_battery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosproto::BatteryStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bosproto::BatteryStatus, _impl_.voltage_mv_),
  PROTOBUF_FIELD_OFFSET(::bosproto::BatteryStatus, _impl_.current_ma_),
  PROTOBUF_FIELD_OFFSET(::bosproto::BatteryStatus, _impl_.capacity_mah_),
  PROTOBUF_FIELD_OFFSET(::bosproto::BatteryStatus, _impl_.max_capacity_mah_),
  PROTOBUF_FIELD_OFFSET(::bosproto::BatteryStatus, _impl_.max_charging_current_ma_),
  PROTOBUF_FIELD_OFFSET(::bosproto::BatteryStatus, _impl_.max_discharging_current_ma_),
  PROTOBUF_FIELD_OFFSET(::bosproto::BatteryStatus, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosproto::ScheduleSetCurrent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bosproto::ScheduleSetCurrent, _impl_.current_ma_),
  PROTOBUF_FIELD_OFFSET(::bosproto::ScheduleSetCurrent, _impl_.starttime_),
  PROTOBUF_FIELD_OFFSET(::bosproto::ScheduleSetCurrent, _impl_.endtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosproto::BatteryCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bosproto::BatteryCommand, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bosproto::BatteryCommand, _impl_.command_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::bosproto::BatteryCommand, _impl_.schedule_parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosproto::BatteryStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bosproto::BatteryStatusResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bosproto::BatteryStatusResponse, _impl_.return_code_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::bosproto::BatteryStatusResponse, _impl_.return_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosproto::ScheduleSetCurrentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bosproto::ScheduleSetCurrentResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bosproto::ScheduleSetCurrentResponse, _impl_.return_code_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::bosproto::ScheduleSetCurrentResponse, _impl_.return_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosproto::RemoveBatteryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bosproto::RemoveBatteryResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bosproto::RemoveBatteryResponse, _impl_.return_code_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::bosproto::RemoveBatteryResponse, _impl_.return_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosproto::SetStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bosproto::SetStatusResponse, _impl_.return_code_),
  PROTOBUF_FIELD_OFFSET(::bosproto::SetStatusResponse, _impl_.reason_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::bosproto::BatteryStatus)},
  { 13, -1, -1, sizeof(::bosproto::ScheduleSetCurrent)},
  { 22, -1, -1, sizeof(::bosproto::BatteryCommand)},
  { 32, -1, -1, sizeof(::bosproto::BatteryStatusResponse)},
  { 42, -1, -1, sizeof(::bosproto::ScheduleSetCurrentResponse)},
  { 52, -1, -1, sizeof(::bosproto::RemoveBatteryResponse)},
  { 62, -1, -1, sizeof(::bosproto::SetStatusResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::bosproto::_BatteryStatus_default_instance_._instance,
  &::bosproto::_ScheduleSetCurrent_default_instance_._instance,
  &::bosproto::_BatteryCommand_default_instance_._instance,
  &::bosproto::_BatteryStatusResponse_default_instance_._instance,
  &::bosproto::_ScheduleSetCurrentResponse_default_instance_._instance,
  &::bosproto::_RemoveBatteryResponse_default_instance_._instance,
  &::bosproto::_SetStatusResponse_default_instance_._instance,
};

const char descriptor_table_protodef_battery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rbattery.proto\022\010bosproto\"\277\001\n\rBatterySta"
  "tus\022\022\n\nvoltage_mV\030\001 \001(\001\022\022\n\ncurrent_mA\030\002 "
  "\001(\001\022\024\n\014capacity_mAh\030\003 \001(\001\022\030\n\020max_capacit"
  "y_mAh\030\004 \001(\001\022\037\n\027max_charging_current_mA\030\005"
  " \001(\001\022\"\n\032max_discharging_current_mA\030\006 \001(\001"
  "\022\021\n\ttimestamp\030\007 \001(\004\"L\n\022ScheduleSetCurren"
  "t\022\022\n\ncurrent_mA\030\001 \001(\001\022\021\n\tstartTime\030\002 \001(\004"
  "\022\017\n\007endTime\030\003 \001(\004\"\264\001\n\016BatteryCommand\022\"\n\007"
  "command\030\001 \001(\0162\021.bosproto.Command\022)\n\006stat"
  "us\030\002 \001(\0132\027.bosproto.BatteryStatusH\000\022<\n\024s"
  "chedule_set_current\030\003 \001(\0132\034.bosproto.Sch"
  "eduleSetCurrentH\000B\025\n\023schedule_parameters"
  "\"~\n\025BatteryStatusResponse\022\023\n\013return_code"
  "\030\001 \001(\003\022\025\n\013fail_reason\030\002 \001(\tH\000\022)\n\006status\030"
  "\003 \001(\0132\027.bosproto.BatteryStatusH\000B\016\n\014retu"
  "rn_value\"w\n\032ScheduleSetCurrentResponse\022\023"
  "\n\013return_code\030\001 \001(\003\022\031\n\017success_message\030\002"
  " \001(\tH\000\022\031\n\017failure_message\030\003 \001(\tH\000B\016\n\014ret"
  "urn_value\"r\n\025RemoveBatteryResponse\022\023\n\013re"
  "turn_code\030\001 \001(\003\022\031\n\017success_message\030\002 \001(\t"
  "H\000\022\031\n\017failure_message\030\003 \001(\tH\000B\016\n\014return_"
  "value\"8\n\021SetStatusResponse\022\023\n\013return_cod"
  "e\030\001 \001(\003\022\016\n\006reason\030\002 \001(\t*W\n\007Command\022\030\n\024Sc"
  "hedule_Set_Current\020\000\022\016\n\nGet_Status\020\001\022\022\n\016"
  "Remove_Battery\020\002\022\016\n\nSet_Status\020\003b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_battery_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_battery_2eproto = {
    false, false, 1000, descriptor_table_protodef_battery_2eproto,
    "battery.proto",
    &descriptor_table_battery_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_battery_2eproto::offsets,
    file_level_metadata_battery_2eproto, file_level_enum_descriptors_battery_2eproto,
    file_level_service_descriptors_battery_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_battery_2eproto_getter() {
  return &descriptor_table_battery_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_battery_2eproto(&descriptor_table_battery_2eproto);
namespace bosproto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Command_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_battery_2eproto);
  return file_level_enum_descriptors_battery_2eproto[0];
}
bool Command_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class BatteryStatus::_Internal {
 public:
};

BatteryStatus::BatteryStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bosproto.BatteryStatus)
}
BatteryStatus::BatteryStatus(const BatteryStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatteryStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.voltage_mv_){}
    , decltype(_impl_.current_ma_){}
    , decltype(_impl_.capacity_mah_){}
    , decltype(_impl_.max_capacity_mah_){}
    , decltype(_impl_.max_charging_current_ma_){}
    , decltype(_impl_.max_discharging_current_ma_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.voltage_mv_, &from._impl_.voltage_mv_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.voltage_mv_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:bosproto.BatteryStatus)
}

inline void BatteryStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.voltage_mv_){0}
    , decltype(_impl_.current_ma_){0}
    , decltype(_impl_.capacity_mah_){0}
    , decltype(_impl_.max_capacity_mah_){0}
    , decltype(_impl_.max_charging_current_ma_){0}
    , decltype(_impl_.max_discharging_current_ma_){0}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BatteryStatus::~BatteryStatus() {
  // @@protoc_insertion_point(destructor:bosproto.BatteryStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatteryStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BatteryStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatteryStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:bosproto.BatteryStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.voltage_mv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.voltage_mv_)) + sizeof(_impl_.timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatteryStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double voltage_mV = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.voltage_mv_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double current_mA = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.current_ma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double capacity_mAh = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.capacity_mah_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_capacity_mAh = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.max_capacity_mah_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_charging_current_mA = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.max_charging_current_ma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_discharging_current_mA = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.max_discharging_current_ma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatteryStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosproto.BatteryStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double voltage_mV = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_voltage_mv = this->_internal_voltage_mv();
  uint64_t raw_voltage_mv;
  memcpy(&raw_voltage_mv, &tmp_voltage_mv, sizeof(tmp_voltage_mv));
  if (raw_voltage_mv != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_voltage_mv(), target);
  }

  // double current_mA = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_ma = this->_internal_current_ma();
  uint64_t raw_current_ma;
  memcpy(&raw_current_ma, &tmp_current_ma, sizeof(tmp_current_ma));
  if (raw_current_ma != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_current_ma(), target);
  }

  // double capacity_mAh = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_capacity_mah = this->_internal_capacity_mah();
  uint64_t raw_capacity_mah;
  memcpy(&raw_capacity_mah, &tmp_capacity_mah, sizeof(tmp_capacity_mah));
  if (raw_capacity_mah != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_capacity_mah(), target);
  }

  // double max_capacity_mAh = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_capacity_mah = this->_internal_max_capacity_mah();
  uint64_t raw_max_capacity_mah;
  memcpy(&raw_max_capacity_mah, &tmp_max_capacity_mah, sizeof(tmp_max_capacity_mah));
  if (raw_max_capacity_mah != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_capacity_mah(), target);
  }

  // double max_charging_current_mA = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_charging_current_ma = this->_internal_max_charging_current_ma();
  uint64_t raw_max_charging_current_ma;
  memcpy(&raw_max_charging_current_ma, &tmp_max_charging_current_ma, sizeof(tmp_max_charging_current_ma));
  if (raw_max_charging_current_ma != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_max_charging_current_ma(), target);
  }

  // double max_discharging_current_mA = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_discharging_current_ma = this->_internal_max_discharging_current_ma();
  uint64_t raw_max_discharging_current_ma;
  memcpy(&raw_max_discharging_current_ma, &tmp_max_discharging_current_ma, sizeof(tmp_max_discharging_current_ma));
  if (raw_max_discharging_current_ma != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_max_discharging_current_ma(), target);
  }

  // uint64 timestamp = 7;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosproto.BatteryStatus)
  return target;
}

size_t BatteryStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosproto.BatteryStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double voltage_mV = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_voltage_mv = this->_internal_voltage_mv();
  uint64_t raw_voltage_mv;
  memcpy(&raw_voltage_mv, &tmp_voltage_mv, sizeof(tmp_voltage_mv));
  if (raw_voltage_mv != 0) {
    total_size += 1 + 8;
  }

  // double current_mA = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_ma = this->_internal_current_ma();
  uint64_t raw_current_ma;
  memcpy(&raw_current_ma, &tmp_current_ma, sizeof(tmp_current_ma));
  if (raw_current_ma != 0) {
    total_size += 1 + 8;
  }

  // double capacity_mAh = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_capacity_mah = this->_internal_capacity_mah();
  uint64_t raw_capacity_mah;
  memcpy(&raw_capacity_mah, &tmp_capacity_mah, sizeof(tmp_capacity_mah));
  if (raw_capacity_mah != 0) {
    total_size += 1 + 8;
  }

  // double max_capacity_mAh = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_capacity_mah = this->_internal_max_capacity_mah();
  uint64_t raw_max_capacity_mah;
  memcpy(&raw_max_capacity_mah, &tmp_max_capacity_mah, sizeof(tmp_max_capacity_mah));
  if (raw_max_capacity_mah != 0) {
    total_size += 1 + 8;
  }

  // double max_charging_current_mA = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_charging_current_ma = this->_internal_max_charging_current_ma();
  uint64_t raw_max_charging_current_ma;
  memcpy(&raw_max_charging_current_ma, &tmp_max_charging_current_ma, sizeof(tmp_max_charging_current_ma));
  if (raw_max_charging_current_ma != 0) {
    total_size += 1 + 8;
  }

  // double max_discharging_current_mA = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_discharging_current_ma = this->_internal_max_discharging_current_ma();
  uint64_t raw_max_discharging_current_ma;
  memcpy(&raw_max_discharging_current_ma, &tmp_max_discharging_current_ma, sizeof(tmp_max_discharging_current_ma));
  if (raw_max_discharging_current_ma != 0) {
    total_size += 1 + 8;
  }

  // uint64 timestamp = 7;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatteryStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatteryStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatteryStatus::GetClassData() const { return &_class_data_; }


void BatteryStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatteryStatus*>(&to_msg);
  auto& from = static_cast<const BatteryStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bosproto.BatteryStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_voltage_mv = from._internal_voltage_mv();
  uint64_t raw_voltage_mv;
  memcpy(&raw_voltage_mv, &tmp_voltage_mv, sizeof(tmp_voltage_mv));
  if (raw_voltage_mv != 0) {
    _this->_internal_set_voltage_mv(from._internal_voltage_mv());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_ma = from._internal_current_ma();
  uint64_t raw_current_ma;
  memcpy(&raw_current_ma, &tmp_current_ma, sizeof(tmp_current_ma));
  if (raw_current_ma != 0) {
    _this->_internal_set_current_ma(from._internal_current_ma());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_capacity_mah = from._internal_capacity_mah();
  uint64_t raw_capacity_mah;
  memcpy(&raw_capacity_mah, &tmp_capacity_mah, sizeof(tmp_capacity_mah));
  if (raw_capacity_mah != 0) {
    _this->_internal_set_capacity_mah(from._internal_capacity_mah());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_capacity_mah = from._internal_max_capacity_mah();
  uint64_t raw_max_capacity_mah;
  memcpy(&raw_max_capacity_mah, &tmp_max_capacity_mah, sizeof(tmp_max_capacity_mah));
  if (raw_max_capacity_mah != 0) {
    _this->_internal_set_max_capacity_mah(from._internal_max_capacity_mah());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_charging_current_ma = from._internal_max_charging_current_ma();
  uint64_t raw_max_charging_current_ma;
  memcpy(&raw_max_charging_current_ma, &tmp_max_charging_current_ma, sizeof(tmp_max_charging_current_ma));
  if (raw_max_charging_current_ma != 0) {
    _this->_internal_set_max_charging_current_ma(from._internal_max_charging_current_ma());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_discharging_current_ma = from._internal_max_discharging_current_ma();
  uint64_t raw_max_discharging_current_ma;
  memcpy(&raw_max_discharging_current_ma, &tmp_max_discharging_current_ma, sizeof(tmp_max_discharging_current_ma));
  if (raw_max_discharging_current_ma != 0) {
    _this->_internal_set_max_discharging_current_ma(from._internal_max_discharging_current_ma());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatteryStatus::CopyFrom(const BatteryStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosproto.BatteryStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryStatus::IsInitialized() const {
  return true;
}

void BatteryStatus::InternalSwap(BatteryStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatteryStatus, _impl_.timestamp_)
      + sizeof(BatteryStatus::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(BatteryStatus, _impl_.voltage_mv_)>(
          reinterpret_cast<char*>(&_impl_.voltage_mv_),
          reinterpret_cast<char*>(&other->_impl_.voltage_mv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BatteryStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battery_2eproto_getter, &descriptor_table_battery_2eproto_once,
      file_level_metadata_battery_2eproto[0]);
}

// ===================================================================

class ScheduleSetCurrent::_Internal {
 public:
};

ScheduleSetCurrent::ScheduleSetCurrent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bosproto.ScheduleSetCurrent)
}
ScheduleSetCurrent::ScheduleSetCurrent(const ScheduleSetCurrent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScheduleSetCurrent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.current_ma_){}
    , decltype(_impl_.starttime_){}
    , decltype(_impl_.endtime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.current_ma_, &from._impl_.current_ma_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.endtime_) -
    reinterpret_cast<char*>(&_impl_.current_ma_)) + sizeof(_impl_.endtime_));
  // @@protoc_insertion_point(copy_constructor:bosproto.ScheduleSetCurrent)
}

inline void ScheduleSetCurrent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.current_ma_){0}
    , decltype(_impl_.starttime_){uint64_t{0u}}
    , decltype(_impl_.endtime_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ScheduleSetCurrent::~ScheduleSetCurrent() {
  // @@protoc_insertion_point(destructor:bosproto.ScheduleSetCurrent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScheduleSetCurrent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScheduleSetCurrent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScheduleSetCurrent::Clear() {
// @@protoc_insertion_point(message_clear_start:bosproto.ScheduleSetCurrent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.current_ma_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.endtime_) -
      reinterpret_cast<char*>(&_impl_.current_ma_)) + sizeof(_impl_.endtime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScheduleSetCurrent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double current_mA = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.current_ma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 startTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 endTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScheduleSetCurrent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosproto.ScheduleSetCurrent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double current_mA = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_ma = this->_internal_current_ma();
  uint64_t raw_current_ma;
  memcpy(&raw_current_ma, &tmp_current_ma, sizeof(tmp_current_ma));
  if (raw_current_ma != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_current_ma(), target);
  }

  // uint64 startTime = 2;
  if (this->_internal_starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_starttime(), target);
  }

  // uint64 endTime = 3;
  if (this->_internal_endtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_endtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosproto.ScheduleSetCurrent)
  return target;
}

size_t ScheduleSetCurrent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosproto.ScheduleSetCurrent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double current_mA = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_ma = this->_internal_current_ma();
  uint64_t raw_current_ma;
  memcpy(&raw_current_ma, &tmp_current_ma, sizeof(tmp_current_ma));
  if (raw_current_ma != 0) {
    total_size += 1 + 8;
  }

  // uint64 startTime = 2;
  if (this->_internal_starttime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_starttime());
  }

  // uint64 endTime = 3;
  if (this->_internal_endtime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_endtime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScheduleSetCurrent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScheduleSetCurrent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScheduleSetCurrent::GetClassData() const { return &_class_data_; }


void ScheduleSetCurrent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScheduleSetCurrent*>(&to_msg);
  auto& from = static_cast<const ScheduleSetCurrent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bosproto.ScheduleSetCurrent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_ma = from._internal_current_ma();
  uint64_t raw_current_ma;
  memcpy(&raw_current_ma, &tmp_current_ma, sizeof(tmp_current_ma));
  if (raw_current_ma != 0) {
    _this->_internal_set_current_ma(from._internal_current_ma());
  }
  if (from._internal_starttime() != 0) {
    _this->_internal_set_starttime(from._internal_starttime());
  }
  if (from._internal_endtime() != 0) {
    _this->_internal_set_endtime(from._internal_endtime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScheduleSetCurrent::CopyFrom(const ScheduleSetCurrent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosproto.ScheduleSetCurrent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduleSetCurrent::IsInitialized() const {
  return true;
}

void ScheduleSetCurrent::InternalSwap(ScheduleSetCurrent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScheduleSetCurrent, _impl_.endtime_)
      + sizeof(ScheduleSetCurrent::_impl_.endtime_)
      - PROTOBUF_FIELD_OFFSET(ScheduleSetCurrent, _impl_.current_ma_)>(
          reinterpret_cast<char*>(&_impl_.current_ma_),
          reinterpret_cast<char*>(&other->_impl_.current_ma_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScheduleSetCurrent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battery_2eproto_getter, &descriptor_table_battery_2eproto_once,
      file_level_metadata_battery_2eproto[1]);
}

// ===================================================================

class BatteryCommand::_Internal {
 public:
  static const ::bosproto::BatteryStatus& status(const BatteryCommand* msg);
  static const ::bosproto::ScheduleSetCurrent& schedule_set_current(const BatteryCommand* msg);
};

const ::bosproto::BatteryStatus&
BatteryCommand::_Internal::status(const BatteryCommand* msg) {
  return *msg->_impl_.schedule_parameters_.status_;
}
const ::bosproto::ScheduleSetCurrent&
BatteryCommand::_Internal::schedule_set_current(const BatteryCommand* msg) {
  return *msg->_impl_.schedule_parameters_.schedule_set_current_;
}
void BatteryCommand::set_allocated_status(::bosproto::BatteryStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_schedule_parameters();
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
    _impl_.schedule_parameters_.status_ = status;
  }
  // @@protoc_insertion_point(field_set_allocated:bosproto.BatteryCommand.status)
}
void BatteryCommand::set_allocated_schedule_set_current(::bosproto::ScheduleSetCurrent* schedule_set_current) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_schedule_parameters();
  if (schedule_set_current) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(schedule_set_current);
    if (message_arena != submessage_arena) {
      schedule_set_current = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schedule_set_current, submessage_arena);
    }
    set_has_schedule_set_current();
    _impl_.schedule_parameters_.schedule_set_current_ = schedule_set_current;
  }
  // @@protoc_insertion_point(field_set_allocated:bosproto.BatteryCommand.schedule_set_current)
}
BatteryCommand::BatteryCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bosproto.BatteryCommand)
}
BatteryCommand::BatteryCommand(const BatteryCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatteryCommand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.command_){}
    , decltype(_impl_.schedule_parameters_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.command_ = from._impl_.command_;
  clear_has_schedule_parameters();
  switch (from.schedule_parameters_case()) {
    case kStatus: {
      _this->_internal_mutable_status()->::bosproto::BatteryStatus::MergeFrom(
          from._internal_status());
      break;
    }
    case kScheduleSetCurrent: {
      _this->_internal_mutable_schedule_set_current()->::bosproto::ScheduleSetCurrent::MergeFrom(
          from._internal_schedule_set_current());
      break;
    }
    case SCHEDULE_PARAMETERS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bosproto.BatteryCommand)
}

inline void BatteryCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.command_){0}
    , decltype(_impl_.schedule_parameters_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_schedule_parameters();
}

BatteryCommand::~BatteryCommand() {
  // @@protoc_insertion_point(destructor:bosproto.BatteryCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatteryCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_schedule_parameters()) {
    clear_schedule_parameters();
  }
}

void BatteryCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatteryCommand::clear_schedule_parameters() {
// @@protoc_insertion_point(one_of_clear_start:bosproto.BatteryCommand)
  switch (schedule_parameters_case()) {
    case kStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.schedule_parameters_.status_;
      }
      break;
    }
    case kScheduleSetCurrent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.schedule_parameters_.schedule_set_current_;
      }
      break;
    }
    case SCHEDULE_PARAMETERS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SCHEDULE_PARAMETERS_NOT_SET;
}


void BatteryCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:bosproto.BatteryCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.command_ = 0;
  clear_schedule_parameters();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatteryCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bosproto.Command command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_command(static_cast<::bosproto::Command>(val));
        } else
          goto handle_unusual;
        continue;
      // .bosproto.BatteryStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .bosproto.ScheduleSetCurrent schedule_set_current = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_schedule_set_current(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatteryCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosproto.BatteryCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosproto.Command command = 1;
  if (this->_internal_command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_command(), target);
  }

  // .bosproto.BatteryStatus status = 2;
  if (_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .bosproto.ScheduleSetCurrent schedule_set_current = 3;
  if (_internal_has_schedule_set_current()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::schedule_set_current(this),
        _Internal::schedule_set_current(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosproto.BatteryCommand)
  return target;
}

size_t BatteryCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosproto.BatteryCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosproto.Command command = 1;
  if (this->_internal_command() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_command());
  }

  switch (schedule_parameters_case()) {
    // .bosproto.BatteryStatus status = 2;
    case kStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.schedule_parameters_.status_);
      break;
    }
    // .bosproto.ScheduleSetCurrent schedule_set_current = 3;
    case kScheduleSetCurrent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.schedule_parameters_.schedule_set_current_);
      break;
    }
    case SCHEDULE_PARAMETERS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatteryCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatteryCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatteryCommand::GetClassData() const { return &_class_data_; }


void BatteryCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatteryCommand*>(&to_msg);
  auto& from = static_cast<const BatteryCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bosproto.BatteryCommand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_command() != 0) {
    _this->_internal_set_command(from._internal_command());
  }
  switch (from.schedule_parameters_case()) {
    case kStatus: {
      _this->_internal_mutable_status()->::bosproto::BatteryStatus::MergeFrom(
          from._internal_status());
      break;
    }
    case kScheduleSetCurrent: {
      _this->_internal_mutable_schedule_set_current()->::bosproto::ScheduleSetCurrent::MergeFrom(
          from._internal_schedule_set_current());
      break;
    }
    case SCHEDULE_PARAMETERS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatteryCommand::CopyFrom(const BatteryCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosproto.BatteryCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryCommand::IsInitialized() const {
  return true;
}

void BatteryCommand::InternalSwap(BatteryCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.command_, other->_impl_.command_);
  swap(_impl_.schedule_parameters_, other->_impl_.schedule_parameters_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatteryCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battery_2eproto_getter, &descriptor_table_battery_2eproto_once,
      file_level_metadata_battery_2eproto[2]);
}

// ===================================================================

class BatteryStatusResponse::_Internal {
 public:
  static const ::bosproto::BatteryStatus& status(const BatteryStatusResponse* msg);
};

const ::bosproto::BatteryStatus&
BatteryStatusResponse::_Internal::status(const BatteryStatusResponse* msg) {
  return *msg->_impl_.return_value_.status_;
}
void BatteryStatusResponse::set_allocated_status(::bosproto::BatteryStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_return_value();
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
    _impl_.return_value_.status_ = status;
  }
  // @@protoc_insertion_point(field_set_allocated:bosproto.BatteryStatusResponse.status)
}
BatteryStatusResponse::BatteryStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bosproto.BatteryStatusResponse)
}
BatteryStatusResponse::BatteryStatusResponse(const BatteryStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BatteryStatusResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.return_code_){}
    , decltype(_impl_.return_value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.return_code_ = from._impl_.return_code_;
  clear_has_return_value();
  switch (from.return_value_case()) {
    case kFailReason: {
      _this->_internal_set_fail_reason(from._internal_fail_reason());
      break;
    }
    case kStatus: {
      _this->_internal_mutable_status()->::bosproto::BatteryStatus::MergeFrom(
          from._internal_status());
      break;
    }
    case RETURN_VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bosproto.BatteryStatusResponse)
}

inline void BatteryStatusResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.return_code_){int64_t{0}}
    , decltype(_impl_.return_value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_return_value();
}

BatteryStatusResponse::~BatteryStatusResponse() {
  // @@protoc_insertion_point(destructor:bosproto.BatteryStatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BatteryStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_return_value()) {
    clear_return_value();
  }
}

void BatteryStatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BatteryStatusResponse::clear_return_value() {
// @@protoc_insertion_point(one_of_clear_start:bosproto.BatteryStatusResponse)
  switch (return_value_case()) {
    case kFailReason: {
      _impl_.return_value_.fail_reason_.Destroy();
      break;
    }
    case kStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.return_value_.status_;
      }
      break;
    }
    case RETURN_VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RETURN_VALUE_NOT_SET;
}


void BatteryStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosproto.BatteryStatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.return_code_ = int64_t{0};
  clear_return_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatteryStatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 return_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.return_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string fail_reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_fail_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bosproto.BatteryStatusResponse.fail_reason"));
        } else
          goto handle_unusual;
        continue;
      // .bosproto.BatteryStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatteryStatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosproto.BatteryStatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 return_code = 1;
  if (this->_internal_return_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_return_code(), target);
  }

  // string fail_reason = 2;
  if (_internal_has_fail_reason()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fail_reason().data(), static_cast<int>(this->_internal_fail_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosproto.BatteryStatusResponse.fail_reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fail_reason(), target);
  }

  // .bosproto.BatteryStatus status = 3;
  if (_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosproto.BatteryStatusResponse)
  return target;
}

size_t BatteryStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosproto.BatteryStatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 return_code = 1;
  if (this->_internal_return_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_return_code());
  }

  switch (return_value_case()) {
    // string fail_reason = 2;
    case kFailReason: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fail_reason());
      break;
    }
    // .bosproto.BatteryStatus status = 3;
    case kStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.return_value_.status_);
      break;
    }
    case RETURN_VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatteryStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BatteryStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatteryStatusResponse::GetClassData() const { return &_class_data_; }


void BatteryStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BatteryStatusResponse*>(&to_msg);
  auto& from = static_cast<const BatteryStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bosproto.BatteryStatusResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_return_code() != 0) {
    _this->_internal_set_return_code(from._internal_return_code());
  }
  switch (from.return_value_case()) {
    case kFailReason: {
      _this->_internal_set_fail_reason(from._internal_fail_reason());
      break;
    }
    case kStatus: {
      _this->_internal_mutable_status()->::bosproto::BatteryStatus::MergeFrom(
          from._internal_status());
      break;
    }
    case RETURN_VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatteryStatusResponse::CopyFrom(const BatteryStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosproto.BatteryStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryStatusResponse::IsInitialized() const {
  return true;
}

void BatteryStatusResponse::InternalSwap(BatteryStatusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.return_code_, other->_impl_.return_code_);
  swap(_impl_.return_value_, other->_impl_.return_value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatteryStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battery_2eproto_getter, &descriptor_table_battery_2eproto_once,
      file_level_metadata_battery_2eproto[3]);
}

// ===================================================================

class ScheduleSetCurrentResponse::_Internal {
 public:
};

ScheduleSetCurrentResponse::ScheduleSetCurrentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bosproto.ScheduleSetCurrentResponse)
}
ScheduleSetCurrentResponse::ScheduleSetCurrentResponse(const ScheduleSetCurrentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScheduleSetCurrentResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.return_code_){}
    , decltype(_impl_.return_value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.return_code_ = from._impl_.return_code_;
  clear_has_return_value();
  switch (from.return_value_case()) {
    case kSuccessMessage: {
      _this->_internal_set_success_message(from._internal_success_message());
      break;
    }
    case kFailureMessage: {
      _this->_internal_set_failure_message(from._internal_failure_message());
      break;
    }
    case RETURN_VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bosproto.ScheduleSetCurrentResponse)
}

inline void ScheduleSetCurrentResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.return_code_){int64_t{0}}
    , decltype(_impl_.return_value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_return_value();
}

ScheduleSetCurrentResponse::~ScheduleSetCurrentResponse() {
  // @@protoc_insertion_point(destructor:bosproto.ScheduleSetCurrentResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScheduleSetCurrentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_return_value()) {
    clear_return_value();
  }
}

void ScheduleSetCurrentResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScheduleSetCurrentResponse::clear_return_value() {
// @@protoc_insertion_point(one_of_clear_start:bosproto.ScheduleSetCurrentResponse)
  switch (return_value_case()) {
    case kSuccessMessage: {
      _impl_.return_value_.success_message_.Destroy();
      break;
    }
    case kFailureMessage: {
      _impl_.return_value_.failure_message_.Destroy();
      break;
    }
    case RETURN_VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RETURN_VALUE_NOT_SET;
}


void ScheduleSetCurrentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosproto.ScheduleSetCurrentResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.return_code_ = int64_t{0};
  clear_return_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScheduleSetCurrentResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 return_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.return_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string success_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_success_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bosproto.ScheduleSetCurrentResponse.success_message"));
        } else
          goto handle_unusual;
        continue;
      // string failure_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_failure_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bosproto.ScheduleSetCurrentResponse.failure_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScheduleSetCurrentResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosproto.ScheduleSetCurrentResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 return_code = 1;
  if (this->_internal_return_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_return_code(), target);
  }

  // string success_message = 2;
  if (_internal_has_success_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_success_message().data(), static_cast<int>(this->_internal_success_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosproto.ScheduleSetCurrentResponse.success_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_success_message(), target);
  }

  // string failure_message = 3;
  if (_internal_has_failure_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_failure_message().data(), static_cast<int>(this->_internal_failure_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosproto.ScheduleSetCurrentResponse.failure_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_failure_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosproto.ScheduleSetCurrentResponse)
  return target;
}

size_t ScheduleSetCurrentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosproto.ScheduleSetCurrentResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 return_code = 1;
  if (this->_internal_return_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_return_code());
  }

  switch (return_value_case()) {
    // string success_message = 2;
    case kSuccessMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_success_message());
      break;
    }
    // string failure_message = 3;
    case kFailureMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_failure_message());
      break;
    }
    case RETURN_VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScheduleSetCurrentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScheduleSetCurrentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScheduleSetCurrentResponse::GetClassData() const { return &_class_data_; }


void ScheduleSetCurrentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScheduleSetCurrentResponse*>(&to_msg);
  auto& from = static_cast<const ScheduleSetCurrentResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bosproto.ScheduleSetCurrentResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_return_code() != 0) {
    _this->_internal_set_return_code(from._internal_return_code());
  }
  switch (from.return_value_case()) {
    case kSuccessMessage: {
      _this->_internal_set_success_message(from._internal_success_message());
      break;
    }
    case kFailureMessage: {
      _this->_internal_set_failure_message(from._internal_failure_message());
      break;
    }
    case RETURN_VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScheduleSetCurrentResponse::CopyFrom(const ScheduleSetCurrentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosproto.ScheduleSetCurrentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduleSetCurrentResponse::IsInitialized() const {
  return true;
}

void ScheduleSetCurrentResponse::InternalSwap(ScheduleSetCurrentResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.return_code_, other->_impl_.return_code_);
  swap(_impl_.return_value_, other->_impl_.return_value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScheduleSetCurrentResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battery_2eproto_getter, &descriptor_table_battery_2eproto_once,
      file_level_metadata_battery_2eproto[4]);
}

// ===================================================================

class RemoveBatteryResponse::_Internal {
 public:
};

RemoveBatteryResponse::RemoveBatteryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bosproto.RemoveBatteryResponse)
}
RemoveBatteryResponse::RemoveBatteryResponse(const RemoveBatteryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveBatteryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.return_code_){}
    , decltype(_impl_.return_value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.return_code_ = from._impl_.return_code_;
  clear_has_return_value();
  switch (from.return_value_case()) {
    case kSuccessMessage: {
      _this->_internal_set_success_message(from._internal_success_message());
      break;
    }
    case kFailureMessage: {
      _this->_internal_set_failure_message(from._internal_failure_message());
      break;
    }
    case RETURN_VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bosproto.RemoveBatteryResponse)
}

inline void RemoveBatteryResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.return_code_){int64_t{0}}
    , decltype(_impl_.return_value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_return_value();
}

RemoveBatteryResponse::~RemoveBatteryResponse() {
  // @@protoc_insertion_point(destructor:bosproto.RemoveBatteryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveBatteryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_return_value()) {
    clear_return_value();
  }
}

void RemoveBatteryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveBatteryResponse::clear_return_value() {
// @@protoc_insertion_point(one_of_clear_start:bosproto.RemoveBatteryResponse)
  switch (return_value_case()) {
    case kSuccessMessage: {
      _impl_.return_value_.success_message_.Destroy();
      break;
    }
    case kFailureMessage: {
      _impl_.return_value_.failure_message_.Destroy();
      break;
    }
    case RETURN_VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RETURN_VALUE_NOT_SET;
}


void RemoveBatteryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosproto.RemoveBatteryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.return_code_ = int64_t{0};
  clear_return_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveBatteryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 return_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.return_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string success_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_success_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bosproto.RemoveBatteryResponse.success_message"));
        } else
          goto handle_unusual;
        continue;
      // string failure_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_failure_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bosproto.RemoveBatteryResponse.failure_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveBatteryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosproto.RemoveBatteryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 return_code = 1;
  if (this->_internal_return_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_return_code(), target);
  }

  // string success_message = 2;
  if (_internal_has_success_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_success_message().data(), static_cast<int>(this->_internal_success_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosproto.RemoveBatteryResponse.success_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_success_message(), target);
  }

  // string failure_message = 3;
  if (_internal_has_failure_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_failure_message().data(), static_cast<int>(this->_internal_failure_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosproto.RemoveBatteryResponse.failure_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_failure_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosproto.RemoveBatteryResponse)
  return target;
}

size_t RemoveBatteryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosproto.RemoveBatteryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 return_code = 1;
  if (this->_internal_return_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_return_code());
  }

  switch (return_value_case()) {
    // string success_message = 2;
    case kSuccessMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_success_message());
      break;
    }
    // string failure_message = 3;
    case kFailureMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_failure_message());
      break;
    }
    case RETURN_VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveBatteryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveBatteryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveBatteryResponse::GetClassData() const { return &_class_data_; }


void RemoveBatteryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveBatteryResponse*>(&to_msg);
  auto& from = static_cast<const RemoveBatteryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bosproto.RemoveBatteryResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_return_code() != 0) {
    _this->_internal_set_return_code(from._internal_return_code());
  }
  switch (from.return_value_case()) {
    case kSuccessMessage: {
      _this->_internal_set_success_message(from._internal_success_message());
      break;
    }
    case kFailureMessage: {
      _this->_internal_set_failure_message(from._internal_failure_message());
      break;
    }
    case RETURN_VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveBatteryResponse::CopyFrom(const RemoveBatteryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosproto.RemoveBatteryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveBatteryResponse::IsInitialized() const {
  return true;
}

void RemoveBatteryResponse::InternalSwap(RemoveBatteryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.return_code_, other->_impl_.return_code_);
  swap(_impl_.return_value_, other->_impl_.return_value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveBatteryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battery_2eproto_getter, &descriptor_table_battery_2eproto_once,
      file_level_metadata_battery_2eproto[5]);
}

// ===================================================================

class SetStatusResponse::_Internal {
 public:
};

SetStatusResponse::SetStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bosproto.SetStatusResponse)
}
SetStatusResponse::SetStatusResponse(const SetStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetStatusResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reason_){}
    , decltype(_impl_.return_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reason().empty()) {
    _this->_impl_.reason_.Set(from._internal_reason(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.return_code_ = from._impl_.return_code_;
  // @@protoc_insertion_point(copy_constructor:bosproto.SetStatusResponse)
}

inline void SetStatusResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reason_){}
    , decltype(_impl_.return_code_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetStatusResponse::~SetStatusResponse() {
  // @@protoc_insertion_point(destructor:bosproto.SetStatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reason_.Destroy();
}

void SetStatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosproto.SetStatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reason_.ClearToEmpty();
  _impl_.return_code_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetStatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 return_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.return_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bosproto.SetStatusResponse.reason"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetStatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosproto.SetStatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 return_code = 1;
  if (this->_internal_return_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_return_code(), target);
  }

  // string reason = 2;
  if (!this->_internal_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosproto.SetStatusResponse.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosproto.SetStatusResponse)
  return target;
}

size_t SetStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosproto.SetStatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  if (!this->_internal_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // int64 return_code = 1;
  if (this->_internal_return_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_return_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetStatusResponse::GetClassData() const { return &_class_data_; }


void SetStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetStatusResponse*>(&to_msg);
  auto& from = static_cast<const SetStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bosproto.SetStatusResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  if (from._internal_return_code() != 0) {
    _this->_internal_set_return_code(from._internal_return_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetStatusResponse::CopyFrom(const SetStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosproto.SetStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetStatusResponse::IsInitialized() const {
  return true;
}

void SetStatusResponse::InternalSwap(SetStatusResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
  swap(_impl_.return_code_, other->_impl_.return_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_battery_2eproto_getter, &descriptor_table_battery_2eproto_once,
      file_level_metadata_battery_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace bosproto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosproto::BatteryStatus*
Arena::CreateMaybeMessage< ::bosproto::BatteryStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosproto::BatteryStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::bosproto::ScheduleSetCurrent*
Arena::CreateMaybeMessage< ::bosproto::ScheduleSetCurrent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosproto::ScheduleSetCurrent >(arena);
}
template<> PROTOBUF_NOINLINE ::bosproto::BatteryCommand*
Arena::CreateMaybeMessage< ::bosproto::BatteryCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosproto::BatteryCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::bosproto::BatteryStatusResponse*
Arena::CreateMaybeMessage< ::bosproto::BatteryStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosproto::BatteryStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosproto::ScheduleSetCurrentResponse*
Arena::CreateMaybeMessage< ::bosproto::ScheduleSetCurrentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosproto::ScheduleSetCurrentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosproto::RemoveBatteryResponse*
Arena::CreateMaybeMessage< ::bosproto::RemoveBatteryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosproto::RemoveBatteryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosproto::SetStatusResponse*
Arena::CreateMaybeMessage< ::bosproto::SetStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosproto::SetStatusResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
